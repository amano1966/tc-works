// eslint-disable-next-line
import { h } from "@stencil/core";
import { DOM_OBSERVER_CONFIG, DEFAULT_CONTAINER_LAYOUT } from "./modus-navbar-main-menu.models";
export class ModusNavbarMainMenu {
    constructor() {
        this.observer = null;
        this.updateContainerLayout = () => {
            var _a;
            const navbarRect = (_a = this.parentNavbar) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
            if (!navbarRect) {
                return;
            }
            const availableHeight = window.innerHeight - navbarRect.bottom;
            const containerHeight = Math.min(availableHeight, window.innerHeight);
            this.containerLayout = Object.assign(Object.assign({}, this.containerLayout), { top: `${navbarRect.bottom}px`, left: `${navbarRect.left}px`, height: `${containerHeight}px` });
        };
        this.parentNavbar = undefined;
        this.containerLayout = DEFAULT_CONTAINER_LAYOUT;
    }
    componentDidLoad() {
        this.updateContainerLayout();
        this.addSubscriptions();
    }
    disconnectedCallback() {
        this.removeSubscriptions();
    }
    addSubscriptions() {
        window.addEventListener('resize', this.updateContainerLayout);
        window.addEventListener('scroll', this.updateContainerLayout);
        this.connectDOMObserver();
    }
    removeSubscriptions() {
        window.removeEventListener('resize', this.updateContainerLayout);
        window.removeEventListener('scroll', this.updateContainerLayout);
        this.disconnectDOMObserver();
    }
    connectDOMObserver() {
        this.observer = new MutationObserver(this.updateContainerLayout);
        this.observer.observe(document.body, DOM_OBSERVER_CONFIG);
    }
    disconnectDOMObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
    }
    render() {
        const positionStyle = Object.assign({}, this.containerLayout);
        return (h("div", { key: '1fddaf35c20631096f4cb7068e9fd21e280bb89d', class: "main-menu", style: positionStyle, onClick: (event) => event.preventDefault() }, h("slot", { key: 'f885fe5064d956a9b4703b4bc3c4dbef0a212722' })));
    }
    static get is() { return "modus-navbar-main-menu"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-navbar-main-menu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-navbar-main-menu.css"]
        };
    }
    static get properties() {
        return {
            "parentNavbar": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get states() {
        return {
            "containerLayout": {}
        };
    }
}
