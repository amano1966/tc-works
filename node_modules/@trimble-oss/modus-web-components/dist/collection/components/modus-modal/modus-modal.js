// eslint-disable-next-line
import { h } from "@stencil/core";
import { IconClose } from "../../icons/svgs/icon-close";
import { FocusWrap, ModalFocusWrapping } from "./modal-focus-wrapping";
import { Fragment } from "@stencil/core/internal";
import { IconCollapse } from "../../icons/generated-icons/IconCollapse";
import { IconExpand } from "../../icons/generated-icons/IconExpand";
/**
 * @slot footerContent - Slot for a custom footer content
 */
export class ModusModal {
    constructor() {
        this.ignoreOverlayClick = false;
        this.ariaLabel = undefined;
        this.headerText = undefined;
        this.primaryButtonAriaLabel = undefined;
        this.primaryButtonDisabled = undefined;
        this.primaryButtonText = undefined;
        this.secondaryButtonAriaLabel = undefined;
        this.secondaryButtonDisabled = undefined;
        this.secondaryButtonText = undefined;
        this.zIndex = '1';
        this.backdrop = 'default';
        this.showFullscreenToggle = false;
        this.fullscreen = false;
        this.isContentScrollable = false;
        this.visible = undefined;
    }
    /** Closes the Modal */
    async close() {
        if (!this.visible)
            return;
        this.visible = false;
        this.closed.emit();
        return Promise.resolve();
    }
    /** Opens the Modal */
    async open() {
        if (this.visible)
            return;
        this.visible = true;
        this.opened.emit();
        return Promise.resolve();
    }
    toggleFullscreen() {
        this.fullscreen = !this.fullscreen;
    }
    handleModalContentMouseDown() {
        // If Mouse was dragged off from the Modal content, ignore mouse up on overlay preventing Modal to close
        this.ignoreOverlayClick = true;
    }
    documentKeyHandler(event) {
        if (event.code.toUpperCase() === 'ESCAPE')
            this.close();
    }
    handleOverlayClick(event) {
        switch (this.backdrop) {
            case 'static':
                return;
            case 'default':
                if (this.ignoreOverlayClick || !event.target.classList.contains('overlay')) {
                    this.ignoreOverlayClick = false;
                    return;
                }
                this.close();
        }
    }
    handleEnterKeydown(event, callback) {
        if (event.code === 'Enter') {
            callback();
        }
    }
    handlePrimaryClick() {
        if (!this.primaryButtonDisabled) {
            this.primaryButtonClick.emit();
        }
    }
    handleSecondaryClick() {
        if (!this.secondaryButtonDisabled) {
            this.secondaryButtonClick.emit();
        }
    }
    componentDidRender() {
        if (this.modalContentRef && this.startTrapRef) {
            this.focusWrapping = new ModalFocusWrapping(this.modalContentRef, this.startTrapRef);
        }
        if (this.modalBodyRef) {
            this.resizeObserver = new ResizeObserver(() => {
                this.checkContentScrollable();
            });
            this.resizeObserver.observe(this.modalBodyRef);
        }
        this.checkContentScrollable();
    }
    disconnectedCallback() {
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
    }
    checkContentScrollable() {
        if (this.modalContentRef) {
            this.isContentScrollable = this.modalBodyRef.scrollHeight > this.modalBodyRef.clientHeight;
        }
    }
    renderModal() {
        return (h("div", { class: "content", ref: (el) => (this.modalContentRef = el), onMouseDown: () => this.handleModalContentMouseDown() }, h(FocusWrap, { id: "startTrap", ref: (el) => (this.startTrapRef = el), onFocus: () => { var _a; return (_a = this.focusWrapping) === null || _a === void 0 ? void 0 : _a.onStartWrapFocus(); } }), this.renderModalHeader(), h("div", { class: "body", ref: (el) => (this.modalBodyRef = el) }, h("slot", null)), this.renderModalFooter(), h(FocusWrap, { id: "endTrap", onFocus: () => { var _a; return (_a = this.focusWrapping) === null || _a === void 0 ? void 0 : _a.onEndWrapFocus(); } })));
    }
    renderModalHeader() {
        return (h("header", { class: { scrollable: this.isContentScrollable } }, this.headerText, h("div", { class: "header-buttons" }, this.showFullscreenToggle && (h("div", { role: "button", tabindex: 0, "aria-label": this.fullscreen ? 'Collapse' : 'Expand', onClick: () => this.toggleFullscreen(), onKeyDown: (event) => this.handleEnterKeydown(event, () => this.toggleFullscreen()) }, this.fullscreen ? h(IconCollapse, { size: "24" }) : h(IconExpand, { size: "24" }))), h("div", { role: "button", tabindex: 0, "aria-label": "Close", onClick: () => this.close(), onKeyDown: (event) => this.handleEnterKeydown(event, () => this.close()) }, h(IconClose, { size: "24" })))));
    }
    renderModalFooter() {
        return (h(Fragment, null, h("footer", { class: {
                'has-buttons': Boolean(this.primaryButtonText || this.secondaryButtonText),
                scrollable: this.isContentScrollable,
            } }, this.secondaryButtonText && (h("modus-button", { disabled: this.secondaryButtonDisabled, "button-style": "outline", color: "secondary", ariaLabel: this.secondaryButtonAriaLabel, onButtonClick: () => this.handleSecondaryClick() }, this.secondaryButtonText)), this.primaryButtonText && (h("modus-button", { disabled: this.primaryButtonDisabled, color: "primary", ariaLabel: this.primaryButtonAriaLabel, onButtonClick: () => this.handlePrimaryClick() }, this.primaryButtonText)), h("slot", { name: "footerContent" }))));
    }
    render() {
        return (h("div", { key: '763cdb0f034096b6ba74cf9041db50350fc50d21', "aria-hidden": this.visible ? undefined : 'true', "aria-label": this.visible ? this.ariaLabel || undefined : undefined, "aria-modal": this.visible ? 'true' : undefined, class: `modus-modal ${this.fullscreen ? 'fullscreen' : ''} overlay ${this.visible ? 'visible' : 'hidden'}`, onClick: (event) => this.handleOverlayClick(event), role: this.visible ? 'dialog' : undefined, style: { zIndex: this.zIndex } }, this.renderModal()));
    }
    static get is() { return "modus-modal"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-modal.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-modal.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "headerText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's primary button text."
                },
                "attribute": "header-text",
                "reflect": false
            },
            "primaryButtonAriaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's primary button aria-label."
                },
                "attribute": "primary-button-aria-label",
                "reflect": false
            },
            "primaryButtonDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disable primary button."
                },
                "attribute": "primary-button-disabled",
                "reflect": false
            },
            "primaryButtonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's primary button text."
                },
                "attribute": "primary-button-text",
                "reflect": false
            },
            "secondaryButtonAriaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's secondary button aria-label."
                },
                "attribute": "secondary-button-aria-label",
                "reflect": false
            },
            "secondaryButtonDisabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disable secondary button."
                },
                "attribute": "secondary-button-disabled",
                "reflect": false
            },
            "secondaryButtonText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's secondary button text."
                },
                "attribute": "secondary-button-text",
                "reflect": false
            },
            "zIndex": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's z-index."
                },
                "attribute": "z-index",
                "reflect": false,
                "defaultValue": "'1'"
            },
            "backdrop": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'default' | 'static'",
                    "resolved": "\"default\" | \"static\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's backdrop. Specify 'static' for a backdrop that doesn't close the modal when clicked outside the modal content"
                },
                "attribute": "backdrop",
                "reflect": false,
                "defaultValue": "'default'"
            },
            "showFullscreenToggle": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Show full screen toggle."
                },
                "attribute": "show-fullscreen-toggle",
                "reflect": false,
                "defaultValue": "false"
            },
            "fullscreen": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The modal's full screen view."
                },
                "attribute": "fullscreen",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "isContentScrollable": {},
            "visible": {}
        };
    }
    static get events() {
        return [{
                "method": "closed",
                "name": "closed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on modal close."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "opened",
                "name": "opened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on modal open."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "primaryButtonClick",
                "name": "primaryButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on primary button click."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "secondaryButtonClick",
                "name": "secondaryButtonClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on secondary button click."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "close": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Closes the Modal",
                    "tags": []
                }
            },
            "open": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Opens the Modal",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "documentKeyHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
