import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { IconHorizontalEllipsis } from "../../../../../icons/svgs/icon-horizontal-ellipsis";
import { KEYBOARD_ENTER, KEYBOARD_ESCAPE, KEYBOARD_SPACE } from "../../../modus-table.constants";
export class ModusTableDropdownMenu {
    constructor() {
        this.context = undefined;
        this.show = false;
    }
    handleClickOutside(event) {
        // Closing the dropdown when click outside
        const withinBoundaries = event.composedPath();
        if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
            this.show = false;
        }
    }
    handleIconKeyDown(event) {
        const eventKey = event.key.toLowerCase();
        if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
            this.show = true;
            event.preventDefault();
        }
        else if (eventKey === KEYBOARD_ESCAPE) {
            this.show = false;
            event.preventDefault();
        }
    }
    handleDropdownKeyDown(event) {
        if (event.key.toLowerCase() === KEYBOARD_ESCAPE) {
            this.show = false;
            this.menuIconContainerRef.focus();
            event.preventDefault();
        }
    }
    render() {
        const { tableInstance: { getAllLeafColumns }, toolbarOptions: options, maxHeight, } = this.context;
        return (h("div", { key: 'e028260e39853e6d9bb12954c06d0ca36b858fbe', class: "dropdown-menu-container" }, h("div", { key: 'f4ca8b772cd9207c5e4349e9b90a6ca270f685bf', tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, h(IconHorizontalEllipsis, { key: 'ee5496caaa3a62710c2f4ce76a0006017c36d136', size: "20" })), (options === null || options === void 0 ? void 0 : options.columnsVisibility) && (h("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, h("modus-table-columns-visibility", { getAllLeafColumns: getAllLeafColumns, columnsVisibility: options === null || options === void 0 ? void 0 : options.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show), maxHeight: maxHeight })))));
    }
    static get is() { return "modus-table-dropdown-menu"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["./modus-table-dropdown-menu.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-table-dropdown-menu.css"]
        };
    }
    static get properties() {
        return {
            "context": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "TableContext",
                    "resolved": "TableContext",
                    "references": {
                        "TableContext": {
                            "location": "import",
                            "path": "../../../models/table-context.models",
                            "id": "src/components/modus-table/models/table-context.models.ts::TableContext"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": ""
                }
            }
        };
    }
    static get states() {
        return {
            "show": {}
        };
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "handleClickOutside",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
