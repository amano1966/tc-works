// eslint-disable-next-line
import { h, Host } from "@stencil/core";
import { IconUploadCloud } from "../../icons/svgs/icon-upload-cloud";
import { IconCancel } from "../../icons/svgs/icon-cancel";
export class ModusFileDropzone {
    constructor() {
        this.onDragLeave = (event) => {
            this.fileDraggedOver = false;
            event.preventDefault();
        };
        this.onDragOver = (event) => {
            if (this.error || this.disabled) {
                return;
            }
            this.fileDraggedOver = true;
            event.preventDefault();
        };
        this.onDrop = (event) => {
            if (this.disabled) {
                return;
            }
            this.fileDraggedOver = false;
            event.preventDefault();
            this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(event.dataTransfer.files)];
            this.updateDropzoneState();
            this.files.emit([this.dropzoneFiles, this.error]);
            this.fileInput.value = null;
        };
        this.onFileChange = () => {
            this.dropzoneFiles = [...this.dropzoneFiles, ...Array.from(this.fileInput.files)];
            this.updateDropzoneState();
            this.files.emit([this.dropzoneFiles, this.error]);
            this.fileInput.value = null;
        };
        this.openBrowse = () => {
            this.fileInput.click();
        };
        this.reset = () => {
            this.dropzoneFiles = [];
            this.error = null;
            this.errorMessageTop = '';
            this.errorMessageBottom = '';
            this.files.emit([this.dropzoneFiles, this.error]);
        };
        this.updateDropzoneState = () => {
            // Raise error if having multiple files is invalid.
            if (!this.multiple && this.dropzoneFiles.length > 1) {
                this.error = 'maxFileCount';
                this.errorMessageTop = 'Multiple files are not allowed.';
                return;
            }
            // Raise error if the max file count has been exceeded.
            if (this.maxFileCount && this.maxFileCount < this.dropzoneFiles.length) {
                this.error = 'maxFileCount';
                this.errorMessageTop = `You can only upload ${this.maxFileCount} ${this.maxFileCount > 1 ? 'files' : 'file'}.`;
                return;
            }
            // Raise error if the max file name length has been exceeded.
            if (this.dropzoneFiles.some((file) => file.name.length > this.maxFileNameLength)) {
                this.error = 'maxFileNameLength';
                this.errorMessageTop = `File name exceeds length limit: ${this.dropzoneFiles.find((file) => file.name.length > this.maxFileNameLength).name}`;
                return;
            }
            // Raise error if the max total file size has been exceeded.
            const totalFileSize = this.dropzoneFiles.reduce((total, file) => total + file.size, 0);
            if (this.maxTotalFileSizeBytes && this.maxTotalFileSizeBytes < totalFileSize) {
                this.error = 'maxTotalFileSize';
                this.errorMessageTop = 'File exceeds size limit.';
                this.errorMessageBottom = `You can only upload a total file size of ${this.maxTotalFileSizeBytes} bytes.`;
                return;
            }
            this.error = null;
            this.errorMessageTop = '';
            this.errorMessageBottom = '';
        };
        this.dropzoneFiles = [];
        this.error = null;
        this.fileDraggedOver = false;
        this.acceptFileTypes = undefined;
        this.ariaLabel = undefined;
        this.description = undefined;
        this.dropzoneHeight = undefined;
        this.dropzoneWidth = undefined;
        this.fileDraggedOverInstructions = 'Drag files here.';
        this.includeStateIcon = true;
        this.label = undefined;
        this.instructions = 'Drag files here or browse to upload.';
        this.maxFileCount = undefined;
        this.maxFileNameLength = undefined;
        this.maxTotalFileSizeBytes = undefined;
        this.multiple = true;
        this.disabled = undefined;
    }
    elementKeydownHandler(event) {
        switch (event.code) {
            case 'Enter':
                this.fileInput.click();
                break;
        }
    }
    /** Add a file to the dropzone. */
    async addFile(file) {
        this.dropzoneFiles.push(file);
        this.updateDropzoneState();
        this.files.emit([this.dropzoneFiles, this.error]);
    }
    /** Get the dropzone's error. */
    async getError() {
        return this.error;
    }
    /** Get the dropzone's files. */
    async getFiles() {
        return this.dropzoneFiles;
    }
    /** Remove a file from the dropzone. */
    async removeFile(fileName) {
        const file = this.dropzoneFiles.find((f) => f.name === fileName);
        const index = this.dropzoneFiles.indexOf(file);
        if (index > -1) {
            this.dropzoneFiles.splice(index, 1);
            this.dropzoneFiles = [...this.dropzoneFiles];
        }
        this.updateDropzoneState();
        this.files.emit([this.dropzoneFiles, this.error]);
    }
    render() {
        return (h(Host, { key: 'e32075caab6e81297f4a9886ec080a2bd4c49d40', "aria-label": this.ariaLabel, role: "button", "aria-disabled": this.disabled ? 'true' : undefined }, h("div", { key: '07f65ed3e45f27a0413da1815a2c1e3e8e6a6c19', class: "modus-file-dropzone" }, h("input", { key: '6c66f4a60bd5345bf6bf9115fae5398f96bea3b6', onChange: this.onFileChange, multiple: this.multiple, ref: (el) => (this.fileInput = el), type: "file", disabled: this.disabled, accept: this.acceptFileTypes }), h("div", { key: 'f5d2d65fd353a4e0761401a3b03cd10cc34058dd', class: "header" }, h("label", { key: '115d3d176add90f4847ccf0197eb09a4293d0839' }, this.label), h("span", { key: '5449f73202db22792b542525757fde422ed7ca68' }, this.description)), h("div", { key: '39c2eb65ae308cb7642e767ea8d06150cf7fc983', class: {
                dropzone: true,
                error: !!this.error,
                highlight: this.fileDraggedOver,
                disabled: this.disabled,
            }, onDragLeave: (e) => this.onDragLeave(e), onDragOver: (e) => this.onDragOver(e), onDrop: (e) => this.onDrop(e), style: { height: this.dropzoneHeight, width: this.dropzoneWidth }, tabIndex: 0 }, this.includeStateIcon && (this.error ? h(IconCancel, { size: '36' }) : h(IconUploadCloud, { size: '36' })), !this.error &&
            (this.fileDraggedOver ? (this.fileDraggedOverInstructions) : (h("div", { class: "browse", onClick: this.openBrowse }, this.instructions))), this.error && (h("div", { class: "error-messages", role: "alert" }, this.errorMessageTop && h("span", null, this.errorMessageTop), this.errorMessageBottom && h("span", null, this.errorMessageBottom), h("modus-button", { "button-style": "outline", color: "secondary", onClick: this.reset }, "Reset")))))));
    }
    static get is() { return "modus-file-dropzone"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-file-dropzone.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-file-dropzone.css"]
        };
    }
    static get properties() {
        return {
            "acceptFileTypes": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's accepted file types"
                },
                "attribute": "accept-file-types",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "description": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's description text."
                },
                "attribute": "description",
                "reflect": false
            },
            "dropzoneHeight": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's height."
                },
                "attribute": "dropzone-height",
                "reflect": false
            },
            "dropzoneWidth": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's width."
                },
                "attribute": "dropzone-width",
                "reflect": false
            },
            "fileDraggedOverInstructions": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's instruction text when a file is being dragged over."
                },
                "attribute": "file-dragged-over-instructions",
                "reflect": false,
                "defaultValue": "'Drag files here.'"
            },
            "includeStateIcon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to include the upload icon."
                },
                "attribute": "include-state-icon",
                "reflect": false,
                "defaultValue": "true"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's label text."
                },
                "attribute": "label",
                "reflect": false
            },
            "instructions": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's instruction text."
                },
                "attribute": "instructions",
                "reflect": false,
                "defaultValue": "'Drag files here or browse to upload.'"
            },
            "maxFileCount": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's max file count."
                },
                "attribute": "max-file-count",
                "reflect": false
            },
            "maxFileNameLength": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's max file name length of each file."
                },
                "attribute": "max-file-name-length",
                "reflect": false
            },
            "maxTotalFileSizeBytes": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropzone's max total file size."
                },
                "attribute": "max-total-file-size-bytes",
                "reflect": false
            },
            "multiple": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether multiple files can be uploaded."
                },
                "attribute": "multiple",
                "reflect": false,
                "defaultValue": "true"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) disables the dropzone"
                },
                "attribute": "disabled",
                "reflect": true
            }
        };
    }
    static get states() {
        return {
            "dropzoneFiles": {},
            "error": {},
            "fileDraggedOver": {}
        };
    }
    static get events() {
        return [{
                "method": "files",
                "name": "files",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when files have been added or removed, regardless of whether they're valid."
                },
                "complexType": {
                    "original": "[File[], string | null]",
                    "resolved": "[File[], string]",
                    "references": {
                        "File": {
                            "location": "global",
                            "id": "global::File"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "addFile": {
                "complexType": {
                    "signature": "(file: File) => Promise<void>",
                    "parameters": [{
                            "name": "file",
                            "type": "File",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "File": {
                            "location": "global",
                            "id": "global::File"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Add a file to the dropzone.",
                    "tags": []
                }
            },
            "getError": {
                "complexType": {
                    "signature": "() => Promise<string | null>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<string>"
                },
                "docs": {
                    "text": "Get the dropzone's error.",
                    "tags": []
                }
            },
            "getFiles": {
                "complexType": {
                    "signature": "() => Promise<File[]>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "File": {
                            "location": "global",
                            "id": "global::File"
                        }
                    },
                    "return": "Promise<File[]>"
                },
                "docs": {
                    "text": "Get the dropzone's files.",
                    "tags": []
                }
            },
            "removeFile": {
                "complexType": {
                    "signature": "(fileName: string) => Promise<void>",
                    "parameters": [{
                            "name": "fileName",
                            "type": "string",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "File": {
                            "location": "global",
                            "id": "global::File"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Remove a file from the dropzone.",
                    "tags": []
                }
            }
        };
    }
    static get listeners() {
        return [{
                "name": "keydown",
                "method": "elementKeydownHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
