// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
import { generateElementId } from "../../utils/utils";
export class ModusSlider {
    constructor() {
        this.sliderId = generateElementId() + '_slider';
        this.ariaLabel = undefined;
        this.disabled = false;
        this.label = undefined;
        this.maxValue = 100;
        this.minValue = 0;
        this.value = '50';
        this.valuePercent = undefined;
        this.updateValuePercent();
    }
    componentWillLoad() {
        this.updateValuePercent();
    }
    updateValuePercent() {
        this.valuePercent = ((Number(this.value) - this.minValue) / (this.maxValue - this.minValue)) * 100;
    }
    handleOnChange(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueChange.emit(value);
    }
    handleOnInput(event) {
        const value = event.currentTarget.value;
        this.value = value;
        this.valueInput.emit(value);
    }
    render() {
        const className = `modus-slider ${this.disabled ? 'disabled' : ''}`;
        return (h("div", { key: 'd3b1022ee8577c49f5b45dbe0d950d2afc19dc1d', "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, class: className, style: { '--value-percent': `${this.valuePercent}%`, marginBottom: '50px', marginTop: '50px' } }, this.label && h("label", { htmlFor: this.sliderId }, this.label), h("input", { key: 'c0a52b06d4edde6e0a276b9a4d3cf218d0c7e073', class: "slider", disabled: this.disabled, id: this.sliderId, max: this.maxValue, min: this.minValue, onChange: (event) => this.handleOnChange(event), onInput: (event) => this.handleOnInput(event), type: "range", value: this.value })));
    }
    static get is() { return "modus-slider"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-slider.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-slider.css"]
        };
    }
    static get properties() {
        return {
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The slider's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the slider is disabled. *"
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The slider's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "maxValue": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The slider's maximum value."
                },
                "attribute": "max-value",
                "reflect": false,
                "defaultValue": "100"
            },
            "minValue": {
                "type": "number",
                "mutable": false,
                "complexType": {
                    "original": "number",
                    "resolved": "number",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The slider's minimum value."
                },
                "attribute": "min-value",
                "reflect": false,
                "defaultValue": "0"
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The slider's value."
                },
                "attribute": "value",
                "reflect": false,
                "defaultValue": "'50'"
            }
        };
    }
    static get states() {
        return {
            "valuePercent": {}
        };
    }
    static get events() {
        return [{
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on slider value change."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "valueInput",
                "name": "valueInput",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on slider value input."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }];
    }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "updateValuePercent"
            }];
    }
}
