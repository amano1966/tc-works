// eslint-disable-next-line
import { h } from "@stencil/core";
import { IconCheck } from "../../icons/svgs/icon-check";
import { ModusIconMap as ModusIcon } from "../../icons/ModusIconMap";
export class ModusListItem {
    constructor() {
        this.classBySize = new Map([
            ['condensed', 'small'],
            ['standard', 'standard'],
            ['large', 'large'],
        ]);
        this.borderless = undefined;
        this.disabled = undefined;
        this.selected = undefined;
        this.leftIcon = undefined;
        this.size = 'standard';
        this.subText = undefined;
        this.wrapSubText = true;
        this.type = 'standard';
        this.iconColor = undefined;
    }
    async focusItem() {
        var _a;
        (_a = this.listItemRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    handleKeydown(e) {
        if (e.key.toLowerCase() === 'enter' && !this.disabled) {
            this.itemClick.emit();
        }
    }
    render() {
        const containerClass = `${this.classBySize.get(this.size)} ${this.disabled ? 'disabled' : ''} ${this.selected ? 'selected' : ''} ${this.borderless ? 'borderless' : ''}`;
        const iconCheckSize = this.size === 'condensed' ? '16' : '24';
        return (h("li", { key: 'a143f4008c7667ab3a118f8e4f243fdf845c9a25', ref: (el) => (this.listItemRef = el), part: "list-item-li", class: containerClass, tabIndex: this.disabled ? -1 : 0, onClick: () => (!this.disabled ? this.itemClick.emit() : null), onKeyDown: (e) => this.handleKeydown(e) }, this.leftIcon && (h("span", { class: "icon left-icon" }, h(ModusIcon, { icon: this.leftIcon, size: "24", color: this.iconColor }))), h("div", { key: '6caeadbfe730b540ff4b34d3c1991c5c64a95add', class: "text-container" }, h("span", { key: 'd0d695a03abafd70b5a240178921492c0523e58c', class: "slot" }, h("slot", { key: 'f3f949fbe697d45e4ae93429de1c6e753354ff39' })), this.subText && h("span", { class: 'sub-text ' + (this.wrapSubText ? 'wrap' : 'no-wrap') }, this.subText)), this.selected && h(IconCheck, { size: iconCheckSize })));
    }
    static get is() { return "modus-list-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-list-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-list-item.css"]
        };
    }
    static get properties() {
        return {
            "borderless": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the list item has a border or not"
                },
                "attribute": "borderless",
                "reflect": false
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the list item"
                },
                "attribute": "disabled",
                "reflect": false
            },
            "selected": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The selected state of the list item"
                },
                "attribute": "selected",
                "reflect": false
            },
            "leftIcon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Takes the icon name and shows the icon aligned to the left of the button text."
                },
                "attribute": "left-icon",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'condensed' | 'large' | 'standard'",
                    "resolved": "\"condensed\" | \"large\" | \"standard\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of list item"
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'standard'"
            },
            "subText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show Subtext below the Slot content or not"
                },
                "attribute": "sub-text",
                "reflect": false
            },
            "wrapSubText": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "true | false",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to wrap the sub text."
                },
                "attribute": "wrap-sub-text",
                "reflect": false,
                "defaultValue": "true"
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The type of list item"
                },
                "attribute": "type",
                "reflect": false,
                "defaultValue": "'standard'"
            },
            "iconColor": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) add color to left Icon"
                },
                "attribute": "icon-color",
                "reflect": false
            }
        };
    }
    static get events() {
        return [{
                "method": "itemClick",
                "name": "itemClick",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on list item click"
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusItem": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
}
