// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
import { generateElementId } from "../../utils/utils";
import { IconExpandMoreCircle } from "../../icons/generated-icons/IconExpandMoreCircle";
import { IconExpandMore } from "../../icons/generated-icons/IconExpandMore";
import { ModusIconMap } from "../../icons/ModusIconMap";
export class ModusAccordionItem {
    constructor() {
        this.expandedContentId = generateElementId() + '_accordion-item';
        this.classBySize = new Map([
            ['condensed', 'small'],
            ['standard', 'standard'],
        ]);
        // Trick to restart an element's animation
        // see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
        // taken from: https://getbootstrap.com/docs/5.3/dist/js/bootstrap.js
        this.reflow = (element) => {
            element.offsetHeight; // eslint-disable-line no-unused-expressions
        };
        this.disabled = undefined;
        this.expandButtonType = 'standardArrow';
        this.expanded = undefined;
        this.headerText = undefined;
        this.icon = undefined;
        this.supportingLabel = undefined;
        this.size = 'standard';
    }
    componentDidLoad() {
        // Initialize MutationObserver to detect DOM change
        this.contentObserver = new MutationObserver(() => this.onContentChange());
        this.contentObserver.observe(this.accordionBodyRef, {
            childList: true,
            subtree: true,
            characterData: true,
            attributes: true,
        });
        // Initialize ResizeObserver for more reliable size change detection
        this.resizeObserver = new ResizeObserver(() => this.onContentChange());
        this.resizeObserver.observe(this.accordionBodyRef.querySelector('.body-content'));
        // Set initial height if expanded
        if (this.expanded) {
            this.adjustHeight();
        }
    }
    disconnectedCallback() {
        if (this.contentObserver) {
            this.contentObserver.disconnect();
        }
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
        if (this.accordionOpenTimeout) {
            clearTimeout(this.accordionOpenTimeout);
        }
        if (this.accordionCloseTimeout) {
            clearTimeout(this.accordionCloseTimeout);
        }
    }
    onContentChange() {
        if (this.expanded && this.accordionBodyRef) {
            this.adjustHeight();
        }
    }
    adjustHeight() {
        requestAnimationFrame(() => {
            if (this.accordionBodyRef && this.expanded && !this.accordionBodyRef.classList.contains('collapsing')) {
                const oldHeight = this.accordionBodyRef.style.height;
                this.accordionBodyRef.style.height = '';
                const scrollHeight = this.accordionBodyRef.scrollHeight;
                this.accordionBodyRef.style.height = oldHeight;
                this.reflow(this.accordionBodyRef);
                requestAnimationFrame(() => {
                    this.accordionBodyRef.style.height = `${scrollHeight}px`;
                });
            }
        });
    }
    handleHeaderClick() {
        if (this.disabled) {
            return;
        }
        this.chevronContainerRef.classList.toggle('reverse');
        if (!this.expanded) {
            this.accordionBodyRef.classList.remove('collapse');
            this.accordionBodyRef.classList.add('collapsing');
            this.accordionBodyRef.style.height = '0';
            this.reflow(this.accordionBodyRef);
            requestAnimationFrame(() => {
                const scrollHeight = this.accordionBodyRef.scrollHeight;
                this.accordionBodyRef.style.height = `${scrollHeight}px`;
                this.accordionOpenTimeout = setTimeout(() => {
                    if (this.accordionBodyRef) {
                        this.accordionBodyRef.classList.remove('collapsing');
                        this.accordionBodyRef.classList.add('show');
                        this.accordionBodyRef.classList.add('collapse');
                        this.accordionBodyRef.style.height = '';
                        this.expanded = true;
                        this.opened.emit();
                    }
                }, 350);
            });
        }
        else {
            const currentHeight = this.accordionBodyRef.getBoundingClientRect().height;
            this.accordionBodyRef.style.height = `${currentHeight}px`;
            this.reflow(this.accordionBodyRef);
            this.accordionBodyRef.classList.add('collapsing');
            this.accordionBodyRef.classList.remove('collapse', 'show');
            requestAnimationFrame(() => {
                this.accordionBodyRef.style.height = '0';
                this.accordionCloseTimeout = setTimeout(() => {
                    if (this.accordionBodyRef) {
                        this.accordionBodyRef.classList.remove('collapsing');
                        this.accordionBodyRef.classList.add('collapse');
                        this.accordionBodyRef.style.height = '';
                        this.expanded = false;
                        this.closed.emit();
                    }
                }, 350);
            });
        }
    }
    handleKeydown(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleHeaderClick();
    }
    renderIcon() {
        const iconSize = this.size === 'condensed' ? '20' : '24';
        return (h("span", { class: "icon" }, h(ModusIconMap, { icon: this.icon, size: iconSize })));
    }
    render() {
        const sizeClass = `${this.classBySize.get(this.size)}`;
        const disabledClass = `${this.disabled ? 'disabled' : ''}`;
        const expandedClass = `${this.expanded ? 'expanded' : ''}`;
        const bodyClass = `body ${sizeClass} collapse${this.expanded ? ' show' : ''}`;
        const headerClass = `header ${sizeClass} ${disabledClass} ${expandedClass}`;
        const expandIconSize = this.size === 'condensed' ? '20' : '24';
        return (h("div", { key: 'ffbaddcfb8629176926443aa42edefb983658f1d', "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "accordion-item" }, h("div", { key: 'eeeea7eb6ddb35825b3c2630b615da40dc7fb030', class: headerClass, role: "button", "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.expandedContentId, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: this.disabled ? -1 : 0 }, this.icon ? this.renderIcon() : null, h("div", { key: '710d83ef1093fa97062c9ab33d95fd1e9b2d72c3', class: "label-container" }, h("span", { key: '744f788063a01f913274eb743242476048362030', class: "title" }, this.headerText), this.supportingLabel && h("span", { class: "supporting-label" }, this.supportingLabel)), h("div", { class: `chevron-container ${this.expanded ? 'reverse' : ''} `, ref: (el) => (this.chevronContainerRef = el) }, this.expandButtonType == 'circleArrow' ? (h(IconExpandMoreCircle, { size: expandIconSize })) : (h(IconExpandMore, { size: expandIconSize })))), h("div", { key: 'b3c47cb05778da5d72005d01d25ada4844248fa4', id: this.expandedContentId, class: bodyClass, ref: (el) => (this.accordionBodyRef = el) }, h("div", { key: 'ff7a12e88cb25c040b6206f98957b1b3242d3ed7', class: "body-content" }, h("slot", { key: '194aaf3f2480c679030f4de8d102d423897c14e6' })))));
    }
    static get is() { return "modus-accordion-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-accordion-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-accordion-item.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the accordion item, locks expand/collapse."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "expandButtonType": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'standardArrow' | 'circleArrow'",
                    "resolved": "\"circleArrow\" | \"standardArrow\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The type of expand button"
                },
                "attribute": "expand-button-type",
                "reflect": false,
                "defaultValue": "'standardArrow'"
            },
            "expanded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether the accordion item is expanded."
                },
                "attribute": "expanded",
                "reflect": false
            },
            "headerText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(required) The text to render in the header."
                },
                "attribute": "header-text",
                "reflect": false
            },
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The icon to display before the header text."
                },
                "attribute": "icon",
                "reflect": false
            },
            "supportingLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The supportingLabel of the accordion."
                },
                "attribute": "supporting-label",
                "reflect": false
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'condensed' | 'standard'",
                    "resolved": "\"condensed\" | \"standard\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The size of accordion item."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'standard'"
            }
        };
    }
    static get events() {
        return [{
                "method": "closed",
                "name": "closed",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on every accordion close."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }, {
                "method": "opened",
                "name": "opened",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on every accordion open."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
}
