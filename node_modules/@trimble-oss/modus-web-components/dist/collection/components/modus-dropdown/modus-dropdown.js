// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { h } from "@stencil/core";
export class ModusDropdown {
    constructor() {
        this.classByPlacement = new Map([
            ['top', 'top'],
            ['right', 'right'],
            ['bottom', 'bottom'],
            ['left', 'left'],
        ]);
        this.dropdownToggleClicked = false;
        this.animateList = false;
        this.ariaLabel = undefined;
        this.customPlacement = undefined;
        this.disabled = undefined;
        this.toggleDropdown = true;
        this.placement = 'bottom';
        this.showDropdownListBorder = true;
        this.borderRadius = '0';
        this.toggleElementId = undefined;
        this.disableCloseOnSelect = false;
        this.visible = undefined;
    }
    componentDidRender() {
        this.toggleElement = this.el.querySelector(`#${this.toggleElementId}`);
        if (!this.toggleElement) {
            throw Error('matching element not found for toggle-element-id');
        }
        if (this.disabled) {
            this.toggleElement.setAttribute('disabled', String(this.disabled));
        }
    }
    documentClickHandler(event) {
        // Close the dropdown when click is outside the current element.
        if (this.dropdownToggleClicked || event.target.closest(`#${this.toggleElementId}`)) {
            // Reset dropdown toggle click
            this.dropdownToggleClicked = false;
            return;
        }
        if (this.visible) {
            this.hideDropdown();
        }
    }
    documentKeyDownHandler(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            if (this.disabled) {
                return;
            }
            if (this.dropdownToggleClicked || event.target.closest(`#${this.toggleElementId}`)) {
                this.dropdownToggleClicked = false;
                return;
            }
            else {
                this.hideDropdown();
            }
        }
        if (event.key === 'Escape' && this.visible) {
            this.hideDropdown();
            this.dropdownToggleClicked = false;
        }
    }
    onDisabledChange(newValue) {
        this.toggleElement.setAttribute('disabled', String(newValue));
    }
    hideDropdown() {
        this.visible = false;
        this.dropdownClose.emit();
    }
    handleDropdownClick(event) {
        if (this.disabled) {
            return;
        }
        if (event.target.closest(`#${this.toggleElementId}`) && this.toggleDropdown) {
            this.visible = !this.visible;
        }
        else {
            if (!this.disableCloseOnSelect) {
                this.visible = false;
            }
        }
        if (!this.visible) {
            this.dropdownClose.emit();
        }
        else {
            this.dropdownToggleClicked = true;
        }
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const listContainerClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.showDropdownListBorder ? 'list-border' : ''} ${this.animateList ? 'animate-list' : ''} ${this.classByPlacement.get(this.placement)}`;
        const left = this.placement === 'right' ? `${(_a = this.toggleElement) === null || _a === void 0 ? void 0 : _a.offsetWidth}px` : 'unset';
        const width = `${((_b = this.toggleElement) === null || _b === void 0 ? void 0 : _b.offsetWidth) ? (_c = this.toggleElement) === null || _c === void 0 ? void 0 : _c.offsetWidth : 0}px`;
        const dropdownClass = {
            dropdown: true,
            disabled: this.disabled,
        };
        return (h("div", { key: '2f74879137815b488816cf099d98b3563a440cee', "aria-label": this.ariaLabel || undefined, class: dropdownClass, onClick: (event) => this.handleDropdownClick(event) }, h("slot", { key: '57d725248db3285395c099db854176aa4f1c1b36', name: "dropdownToggle" }), h("div", { key: '606fbb3cb4d7dc2cf8739295d22324071999602a', class: listContainerClass, part: "dropdownListPanel", style: {
                top: ((_d = this.customPlacement) === null || _d === void 0 ? void 0 : _d.top) ? `${(_e = this.customPlacement) === null || _e === void 0 ? void 0 : _e.top}px` : '',
                right: ((_f = this.customPlacement) === null || _f === void 0 ? void 0 : _f.right) ? `${(_g = this.customPlacement) === null || _g === void 0 ? void 0 : _g.right}px` : '',
                left: ((_h = this.customPlacement) === null || _h === void 0 ? void 0 : _h.left) ? `${(_j = this.customPlacement) === null || _j === void 0 ? void 0 : _j.left}px` : left,
                bottom: ((_k = this.customPlacement) === null || _k === void 0 ? void 0 : _k.bottom) ? `${(_l = this.customPlacement) === null || _l === void 0 ? void 0 : _l.bottom}px` : '',
                'min-width': width,
                'border-radius': `${this.borderRadius}px`,
            } }, h("slot", { key: '404c76ba9506b37807e6b03a38c7647a89578163', name: "dropdownList" }))));
    }
    static get is() { return "modus-dropdown"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-dropdown.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-dropdown.css"]
        };
    }
    static get properties() {
        return {
            "animateList": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether to apply list opening animation."
                },
                "attribute": "animate-list",
                "reflect": false,
                "defaultValue": "false"
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The dropdown's aria-label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "customPlacement": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "{\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  }",
                    "resolved": "{ top?: number; right?: number; bottom?: number; left?: number; }",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Determines custom dropdown placement offset."
                }
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables the dropdown."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "toggleDropdown": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Toggles the list when clicked."
                },
                "attribute": "toggle-dropdown",
                "reflect": false,
                "defaultValue": "true"
            },
            "placement": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'top' | 'right' | 'bottom' | 'left'",
                    "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The placement of the dropdown in related to the toggleElement."
                },
                "attribute": "placement",
                "reflect": false,
                "defaultValue": "'bottom'"
            },
            "showDropdownListBorder": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Whether to show the dropdown list's border."
                },
                "attribute": "show-dropdown-list-border",
                "reflect": false,
                "defaultValue": "true"
            },
            "borderRadius": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The border radius of the dropdown list."
                },
                "attribute": "border-radius",
                "reflect": false,
                "defaultValue": "'0'"
            },
            "toggleElementId": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(required) The element id that the list renders near and that triggers the toggling of the list."
                },
                "attribute": "toggle-element-id",
                "reflect": false
            },
            "disableCloseOnSelect": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Prevents the dropdown from closing when an option is selected."
                },
                "attribute": "disable-close-on-select",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "visible": {}
        };
    }
    static get events() {
        return [{
                "method": "dropdownClose",
                "name": "dropdownClose",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires on dropdown close."
                },
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                }
            }];
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "disabled",
                "methodName": "onDisabledChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "click",
                "method": "documentClickHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "documentKeyDownHandler",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
