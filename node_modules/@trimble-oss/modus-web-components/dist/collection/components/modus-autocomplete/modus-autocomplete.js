/* eslint-disable @typescript-eslint/no-explicit-any */
// eslint-disable-next-line
import { h, // eslint-disable-line @typescript-eslint/no-unused-vars
 } from "@stencil/core";
import { IconSearch } from "../../icons/svgs/icon-search";
import { generateElementId } from "../../utils/utils";
import { IconCheck } from "../../icons/generated-icons/IconCheck";
import { IconClose } from "../../icons/svgs/icon-close";
const DATA_ID = 'data-id';
const DATA_SEARCH_VALUE = 'data-search-value';
export class ModusAutocomplete {
    constructor() {
        this.listId = generateElementId() + '_list';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.displayNoResults = () => {
            var _a, _b, _c;
            return !this.loading &&
                this.showNoResultsFoundMessage &&
                this.hasFocus &&
                !((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.length) &&
                !((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.length) &&
                ((_c = this.value) === null || _c === void 0 ? void 0 : _c.length) > 0 &&
                !this.readOnly;
        };
        this.displayOptions = () => {
            var _a;
            const showOptions = this.showOptionsOnFocus || ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.disableCloseOnSelect || this.ShowItemsOnKeyDown;
            return !this.loading && this.hasFocus && showOptions && !this.disabled && !this.readOnly;
        };
        this.handleCustomOptionClick = (option) => {
            const optionValue = option.getAttribute(DATA_SEARCH_VALUE);
            const optionId = option.getAttribute(DATA_ID);
            if (this.multiple) {
                this.addChipValue({ id: optionId, value: optionValue });
            }
            else {
                this.selectedOption = optionValue;
                this.disableFiltering = this.disableCloseOnSelect;
                this.handleSearchChange(optionValue);
                this.focusItemIndex = this.visibleCustomOptions.findIndex((el) => el.getAttribute(DATA_ID) === optionId);
            }
            this.hasFocus = this.disableCloseOnSelect;
            this.optionSelected.emit(optionId);
        };
        this.handleInputBlur = () => {
            this.hasFocus = !this.disableCloseOnSelect;
        };
        this.handleKeyDown = (event) => {
            if (event.defaultPrevented) {
                return; // Do nothing if event already handled
            }
            if (event.code.toUpperCase() === 'ARROWDOWN') {
                this.ShowItemsOnKeyDown = true;
                if (this.displayOptions() && !this.displayNoResults()) {
                    this.focusItemIndex = 0;
                    this.focusOptionItem();
                }
            }
            else if (event.code.toUpperCase() === 'ESCAPE') {
                this.ShowItemsOnKeyDown = false;
            }
        };
        this.handleOptionKeyDown = (event, option, isCustomOption = false) => {
            this.disableFiltering = !this.disableCloseOnSelect;
            switch (event.key.toUpperCase()) {
                case 'ENTER':
                case ' ':
                    if (isCustomOption) {
                        this.handleCustomOptionClick(option);
                    }
                    else {
                        this.handleOptionClick(option);
                    }
                    break;
                case 'ARROWDOWN':
                    if (isCustomOption) {
                        this.handleArrowDown(this.visibleCustomOptions);
                    }
                    else {
                        this.handleArrowDown(this.visibleOptions);
                    }
                    event.preventDefault();
                    break;
                case 'ARROWUP':
                    this.handleArrowUp();
                    break;
                default:
                    return;
            }
        };
        this.handleOptionClick = (option) => {
            if (this.multiple) {
                this.addChipValue(option);
            }
            else {
                this.selectedOption = option.value;
                this.disableFiltering = this.disableCloseOnSelect;
                this.focusItemIndex = this.visibleOptions.findIndex((el) => el.id === option.id);
                this.handleSearchChange(option.value);
            }
            this.hasFocus = this.disableCloseOnSelect;
            this.optionSelected.emit(option.id);
        };
        this.handleArrowDown = (options) => {
            this.focusItemIndex = Math.min(options.length - 1, this.focusItemIndex + 1);
            this.focusOptionItem();
        };
        this.handleInputKeyDown = (e) => {
            if (e.defaultPrevented) {
                return; // Do nothing if event already handled
            }
            if (e.key === 'Backspace' && this.multiple && !this.getValueAsString() && this.selectedChips.length > 0) {
                this.selectedChips = this.selectedChips.slice(0, -1);
                this.valueChange.emit(this.selectedChips.map((opt) => opt.value));
                this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
            }
        };
        this.handleArrowUp = () => {
            this.focusItemIndex = Math.max(0, this.focusItemIndex - 1);
            this.focusOptionItem();
        };
        this.focusOptionItem = () => {
            var _a;
            (_a = this.el.shadowRoot.querySelectorAll('[role="option"]')[this.focusItemIndex]) === null || _a === void 0 ? void 0 : _a.focus();
        };
        this.handleSearchChange = (search, skipFiltering = false) => {
            if (!skipFiltering) {
                this.updateVisibleOptions(search);
                this.updateVisibleCustomOptions(search);
            }
            this.value = search;
            this.valueChange.emit(search);
        };
        this.handleChipDelete = (e, chip) => {
            if (e.key !== 'Delete') {
                return;
            }
            this.removeChip(chip);
        };
        this.handleTextInputFocus = () => {
            var _a;
            const hasDefaultTextInput = ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) > 0 && !this.disableCloseOnSelect;
            if (hasDefaultTextInput) {
                this.disableFiltering = true;
            }
        };
        this.handleTextInputValueChange = (event) => {
            var _a;
            if (typeof this.filterOptions === 'function') {
                const tempValue = event.detail;
                this.handleSearchChange(tempValue, true);
                (_a = this.filterOptions(tempValue)) === null || _a === void 0 ? void 0 : _a.then((filteredOptions) => {
                    const currentValue = this.getValueAsString();
                    if (tempValue !== currentValue) {
                        return;
                    }
                    const transformedOptions = filteredOptions[0] && typeof filteredOptions[0] === 'string'
                        ? this.stringToOption(filteredOptions)
                        : filteredOptions;
                    this.options = transformedOptions;
                    this.visibleOptions = transformedOptions;
                });
            }
            else {
                // Cancel the modus-text-input's value change event or else it will bubble to consumer.
                event.stopPropagation();
                this.disableFiltering = !this.disableCloseOnSelect;
                this.handleSearchChange(event.detail);
            }
        };
        this.updateVisibleCustomOptions = (search = '') => {
            var _a, _b;
            if (!this.hasFocus) {
                return;
            }
            const slotted = (_a = this.el.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('slot');
            if (!slotted || typeof slotted.assignedNodes !== 'function') {
                return;
            }
            this.customOptions = slotted.assignedNodes().filter((node) => node.nodeName !== '#text');
            search = search || '';
            const isSearchEmpty = search.length === 0;
            if (isSearchEmpty) {
                this.selectedOption = '';
            }
            if (!this.disableFiltering) {
                this.visibleCustomOptions = (_b = this.customOptions) === null || _b === void 0 ? void 0 : _b.filter((o) => {
                    var _a;
                    return (_a = o.getAttribute(DATA_SEARCH_VALUE)) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(search === null || search === void 0 ? void 0 : search.toLowerCase());
                });
            }
            else {
                this.visibleCustomOptions = this.customOptions;
            }
            this.containsSlottedElements = this.customOptions.length > 0;
        };
        this.updateVisibleOptions = (search = '') => {
            var _a;
            if (!this.hasFocus) {
                return;
            }
            search = search || '';
            const isSearchEmpty = search.length === 0;
            if (isSearchEmpty) {
                this.selectedOption = '';
            }
            if (!this.disableFiltering) {
                this.visibleOptions = (_a = this === null || this === void 0 ? void 0 : this.options) === null || _a === void 0 ? void 0 : _a.filter((o) => {
                    var _a;
                    return (_a = o === null || o === void 0 ? void 0 : o.value) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(search === null || search === void 0 ? void 0 : search.toLowerCase());
                });
            }
            else {
                this.visibleOptions = this === null || this === void 0 ? void 0 : this.options;
            }
        };
        this.getHighlightedText = (text, search) => {
            if (!search)
                return text;
            const escapedSearch = search.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const regex = new RegExp(escapedSearch, 'gi');
            const highlightedText = text.replace(regex, (match) => `<span class="highlight-text">${match}</span>`);
            return h("span", { innerHTML: highlightedText });
        };
        // Do not display the slot for the custom options. We use this hidden slot to reference the slot's children.
        this.CustomOptionsSlot = () => (h("div", { style: { display: 'none' } }, h("slot", { onSlotchange: () => this.updateVisibleCustomOptions(this.getValueAsString()) })));
        this.TextInput = () => (h("modus-text-input", { class: "input", autocomplete: "off", includeSearchIcon: false, onFocus: this.handleTextInputFocus, onValueChange: (searchEvent) => this.handleTextInputValueChange(searchEvent), placeholder: this.placeholder, size: this.size, type: "search", value: this.getValueAsString(), onBlur: this.handleInputBlur, onKeyDown: (e) => this.handleInputKeyDown(e), role: "combobox", disabled: this.disabled, readOnly: this.readOnly, "aria-autocomplete": "list", "aria-controls": this.listId, "aria-expanded": this.displayOptions() }));
        this.scrollToOptionSelected = () => {
            if (this.multiple || this.focusItemIndex === 0) {
                return;
            }
            const optionList = this.el.shadowRoot.querySelector(`.options-container`);
            const selectedOption = optionList.querySelector('li.selected');
            if (selectedOption) {
                selectedOption.scrollIntoView({ behavior: 'smooth', inline: 'nearest' });
            }
        };
        this.multiple = undefined;
        this.ariaLabel = undefined;
        this.clearable = false;
        this.disabled = undefined;
        this.disableCloseOnSelect = undefined;
        this.dropdownMaxHeight = '300px';
        this.dropdownZIndex = '1';
        this.errorText = undefined;
        this.includeSearchIcon = true;
        this.label = undefined;
        this.noResultsFoundText = 'No results found';
        this.noResultsFoundSubtext = 'Check spelling or try a different keyword';
        this.options = undefined;
        this.filterOptions = undefined;
        this.selectedChips = [];
        this.selectedOption = undefined;
        this.loading = false;
        this.showOptionsOnFocus = undefined;
        this.placeholder = undefined;
        this.readOnly = undefined;
        this.required = undefined;
        this.showNoResultsFoundMessage = true;
        this.size = 'medium';
        this.value = undefined;
        this.containsSlottedElements = false;
        this.hasFocus = false;
        this.visibleOptions = [];
        this.customOptions = [];
        this.visibleCustomOptions = [];
        this.disableFiltering = false;
        this.focusItemIndex = 0;
        this.ShowItemsOnKeyDown = false;
    }
    watchOptions() {
        this.convertOptions();
        this.updateVisibleOptions(this.getValueAsString());
    }
    onValueChange() {
        if (this.hasFocus && !this.disableCloseOnSelect) {
            this.disableFiltering = false;
            this.updateVisibleOptions(this.getValueAsString());
            this.updateVisibleCustomOptions(this.getValueAsString());
        }
        if (this.multiple && Array.isArray(this.value)) {
            if (this.value.length) {
                this.initializeSelectedChips();
            }
            else {
                this.handleClear();
                this.errorText = '';
            }
        }
    }
    componentWillLoad() {
        this.convertOptions();
        if (this.multiple) {
            this.initializeSelectedChips();
        }
    }
    componentDidRender() {
        if (this.displayOptions()) {
            this.scrollToOptionSelected();
        }
    }
    /** Focus the autocomplete component */
    async focusInput() {
        const textInputElement = this.el.shadowRoot.querySelector('modus-text-input');
        if (textInputElement) {
            textInputElement.focusInput();
        }
    }
    onMouseDown(event) {
        if (!this.hasFocus) {
            return;
        }
        if (this.el !== event.target || !this.el.contains(event.target)) {
            this.hasFocus = false;
            this.ShowItemsOnKeyDown = false;
        }
    }
    stringToOption(options) {
        return options === null || options === void 0 ? void 0 : options.map((option) => ({
            id: option,
            value: option,
        }));
    }
    convertOptions() {
        if (this.options && this.options.length > 0) {
            if (typeof this.options[0] === 'string') {
                this.options = this.stringToOption(this.options);
            }
        }
    }
    addChipValue(value) {
        if (this.selectedChips.some((chip) => chip.id === value.id)) {
            return;
        }
        this.selectedChips = [...this.selectedChips, value];
        this.valueChange.emit(this.selectedChips.map((opt) => opt.value));
        this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
        this.value = '';
    }
    handleClear() {
        this.selectedChips = [];
        this.selectedOption = '';
        this.value = '';
        this.valueChange.emit(this.multiple ? [] : '');
        this.selectionsChanged.emit(this.multiple ? [] : null);
    }
    handleClearKeyDown(event) {
        if (event.key !== 'Enter' && event.key !== ' ') {
            return;
        }
        this.handleClear();
    }
    getValueAsString() {
        if (this.value && Array.isArray(this.value)) {
            return '';
        }
        if (this.value && typeof this.value === 'string') {
            return this.value;
        }
        return '';
    }
    initializeSelectedChips() {
        if (Array.isArray(this.value)) {
            const val = this.value.map((v) => v.trim());
            const filteredOptions = this.options.filter((option) => val.includes(option.value));
            this.selectedChips = filteredOptions;
            this.valueChange.emit(this.selectedChips.map((opt) => opt.value));
            this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
        }
    }
    handleCloseClick(chipValue) {
        this.removeChip(chipValue);
    }
    removeChip(chipValue) {
        if (this.selectedChips.length != 0 && !this.readOnly) {
            this.selectedChips = this.selectedChips.filter((chip) => chip.id !== chipValue.id);
            this.valueChange.emit(this.selectedChips.map((v) => v.value));
            this.selectionsChanged.emit(this.selectedChips.map((opt) => opt.id));
        }
    }
    valueChangedHandler(event) {
        if (event.detail == null) {
            this.handleClear();
        }
    }
    render() {
        var _a, _b;
        const classes = `autocomplete ${this.classBySize.get(this.size)}`;
        const iconSize = this.size === 'large' ? '24' : '16';
        const showClearIcon = this.clearable && !this.readOnly && !this.disabled && (!!this.value || this.selectedChips.length > 0);
        return (h("div", { key: '2e1d65aa5f02f1199b0c3e63ed4ab81da41a6062', "aria-disabled": this.disabled ? 'true' : undefined, "aria-invalid": !!this.errorText, "aria-label": this.ariaLabel || undefined, "aria-readonly": this.readOnly ? 'true' : undefined, "aria-required": this.required, class: classes, onFocusin: () => {
                if (this.hasFocus) {
                    return;
                }
                this.hasFocus = true;
                this.updateVisibleOptions(this.getValueAsString());
                this.updateVisibleCustomOptions(this.getValueAsString());
            }, onFocusout: () => {
                if (this.hasFocus) {
                    this.hasFocus = this.disableCloseOnSelect;
                }
            }, onKeyDown: (e) => this.handleKeyDown(e) }, this.label || this.required ? (h("div", { class: 'label-container' }, this.label ? h("label", null, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null, h("div", { key: 'c11b8a67b60820fb603bb517861083f3e2defb1c', class: `chips-container ${this.clearable ? 'clearable-icon' : ''}` }, this.includeSearchIcon ? h(IconSearch, { size: "16" }) : null, this.selectedChips.map((chip) => (h("modus-chip", { class: "autocomplete-chip", tabIndex: this.disabled ? -1 : 0, value: chip.value, chipId: chip.id, disabled: this.disabled, onKeyDown: (e) => this.handleChipDelete(e, chip), size: this.size === 'large' ? 'medium' : 'small', "show-close": true, onCloseClick: () => this.handleCloseClick(chip) }))), this.TextInput(), showClearIcon && (h("span", { class: "icons clear", tabIndex: 0, onKeyDown: (event) => this.handleClearKeyDown(event), onClick: () => this.handleClear(), role: "button", "aria-label": "Clear entry" }, h(IconClose, { size: iconSize })))), h("div", { key: 'a99555ba4a09030b1e646b2068ab835e16d479ce', class: 'error' }, this.errorText ? h("label", { class: "sub-text error" }, this.errorText) : null), h("div", { key: 'e3441ad7714adbdea717b2881d94b7a3f1038959', class: "options-container", style: { maxHeight: this.dropdownMaxHeight, zIndex: this.dropdownZIndex, overflowY: 'auto' } }, h("ul", { key: '89aeef4adc34adad8f45eeb3b893d2c79e88a2c9', id: this.listId, "aria-label": "options", role: "listbox" }, this.displayOptions() &&
            ((_a = this.visibleOptions) === null || _a === void 0 ? void 0 : _a.map((option) => {
                let className;
                let isSelected;
                if (this.multiple) {
                    isSelected = this.selectedChips.includes(option);
                    className = 'text-option' + (isSelected ? ' selected' : '');
                }
                else {
                    isSelected = this.selectedOption === option.value;
                    className = 'text-option' + (isSelected ? ' selected' : '');
                }
                return (h("li", { class: className, tabindex: "-1", role: "option", onMouseDown: () => this.handleOptionClick(option), onKeyDown: (e) => this.handleOptionKeyDown(e, option) }, this.getHighlightedText(option.value, this.getValueAsString()), isSelected && h(IconCheck, { size: "16" })));
            })), this.displayOptions() &&
            ((_b = this.visibleCustomOptions) === null || _b === void 0 ? void 0 : _b.map((option) => {
                const optionValue = option.getAttribute(DATA_SEARCH_VALUE);
                const isSelected = this.selectedChips.some((chip) => chip.value === optionValue);
                let className;
                if (this.multiple) {
                    className = 'custom-option' + (isSelected ? ' selected' : '');
                }
                else {
                    className = 'custom-option' + (this.selectedOption === optionValue ? ' selected' : '');
                }
                return (h("li", { class: className, tabindex: "-1", role: "option", onMouseDown: () => this.handleCustomOptionClick(option), onKeyDown: (e) => this.handleOptionKeyDown(e, option, true), innerHTML: option.outerHTML }));
            }))), this.loading ? (h(LoadingSpinner, null)) : (this.displayNoResults() && h(NoResultsFound, { text: this.noResultsFoundText, subtext: this.noResultsFoundSubtext }))), this.CustomOptionsSlot()));
    }
    static get is() { return "modus-autocomplete"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-autocomplete.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-autocomplete.css"]
        };
    }
    static get properties() {
        return {
            "multiple": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "When enabled, multiple options can be selected in the component. And selected options are shown as chips in the input."
                },
                "attribute": "multiple",
                "reflect": false
            },
            "ariaLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string | null",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's aria label."
                },
                "attribute": "aria-label",
                "reflect": false
            },
            "clearable": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the input has a clear button."
                },
                "attribute": "clearable",
                "reflect": false,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the input is disabled."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "disableCloseOnSelect": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the autocomplete's options always display on select."
                },
                "attribute": "disable-close-on-select",
                "reflect": false
            },
            "dropdownMaxHeight": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's dropdown's max height."
                },
                "attribute": "dropdown-max-height",
                "reflect": false,
                "defaultValue": "'300px'"
            },
            "dropdownZIndex": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's dropdown z-index."
                },
                "attribute": "dropdown-z-index",
                "reflect": false,
                "defaultValue": "'1'"
            },
            "errorText": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's error text."
                },
                "attribute": "error-text",
                "reflect": false
            },
            "includeSearchIcon": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the search icon is included."
                },
                "attribute": "include-search-icon",
                "reflect": false,
                "defaultValue": "true"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's label."
                },
                "attribute": "label",
                "reflect": false
            },
            "noResultsFoundText": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's no results text."
                },
                "attribute": "no-results-found-text",
                "reflect": false,
                "defaultValue": "'No results found'"
            },
            "noResultsFoundSubtext": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's no results sub-text."
                },
                "attribute": "no-results-found-subtext",
                "reflect": false,
                "defaultValue": "'Check spelling or try a different keyword'"
            },
            "options": {
                "type": "unknown",
                "mutable": true,
                "complexType": {
                    "original": "ModusAutocompleteOption[] | string[]",
                    "resolved": "ModusAutocompleteOption[] | string[]",
                    "references": {
                        "ModusAutocompleteOption": {
                            "location": "local",
                            "path": "/home/runner/work/modus-web-components/modus-web-components/stencil-workspace/src/components/modus-autocomplete/modus-autocomplete.tsx",
                            "id": "src/components/modus-autocomplete/modus-autocomplete.tsx::ModusAutocompleteOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's options."
                }
            },
            "filterOptions": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "(search: string) => Promise<ModusAutocompleteOption[] | string[]>",
                    "resolved": "(search: string) => Promise<ModusAutocompleteOption[] | string[]>",
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "ModusAutocompleteOption": {
                            "location": "local",
                            "path": "/home/runner/work/modus-web-components/modus-web-components/stencil-workspace/src/components/modus-autocomplete/modus-autocomplete.tsx",
                            "id": "src/components/modus-autocomplete/modus-autocomplete.tsx::ModusAutocompleteOption"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "A promise that returns the filtered options."
                }
            },
            "loading": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the autocomplete is in a loading state."
                },
                "attribute": "loading",
                "reflect": false,
                "defaultValue": "false"
            },
            "showOptionsOnFocus": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether to show autocomplete's options when focus."
                },
                "attribute": "show-options-on-focus",
                "reflect": false
            },
            "placeholder": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's input placeholder."
                },
                "attribute": "placeholder",
                "reflect": false
            },
            "readOnly": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the autocomplete is read-only."
                },
                "attribute": "read-only",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether the autocomplete is required."
                },
                "attribute": "required",
                "reflect": false
            },
            "showNoResultsFoundMessage": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Whether to show the no results found message."
                },
                "attribute": "show-no-results-found-message",
                "reflect": false,
                "defaultValue": "true"
            },
            "size": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "'medium' | 'large'",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's size."
                },
                "attribute": "size",
                "reflect": false,
                "defaultValue": "'medium'"
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string | string[]",
                    "resolved": "string | string[]",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The autocomplete's search value."
                },
                "attribute": "value",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "selectedChips": {},
            "selectedOption": {},
            "containsSlottedElements": {},
            "hasFocus": {},
            "visibleOptions": {},
            "customOptions": {},
            "visibleCustomOptions": {},
            "disableFiltering": {},
            "focusItemIndex": {},
            "ShowItemsOnKeyDown": {}
        };
    }
    static get events() {
        return [{
                "method": "optionSelected",
                "name": "optionSelected",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a dropdown option is selected. Emits the option id."
                },
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                }
            }, {
                "method": "valueChange",
                "name": "valueChange",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when the input value changes. Emits the value string."
                },
                "complexType": {
                    "original": "string | string[]",
                    "resolved": "string | string[]",
                    "references": {}
                }
            }, {
                "method": "selectionsChanged",
                "name": "selectionsChanged",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when an option is selected/removed. Emits the option ids."
                },
                "complexType": {
                    "original": "string[]",
                    "resolved": "string[]",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusInput": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Focus the autocomplete component",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "el"; }
    static get watchers() {
        return [{
                "propName": "options",
                "methodName": "watchOptions"
            }, {
                "propName": "value",
                "methodName": "onValueChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "mousedown",
                "method": "onMouseDown",
                "target": "document",
                "capture": false,
                "passive": true
            }, {
                "name": "valueChange",
                "method": "valueChangedHandler",
                "target": undefined,
                "capture": false,
                "passive": false
            }];
    }
}
const NoResultsFound = (props) => (h("div", { class: "no-results" }, h("div", { style: { display: 'flex' } }, h(IconSearch, { size: "28px" }), h("div", { class: "message" }, props.text)), h("div", { class: "subtext" }, props.subtext)));
const LoadingSpinner = () => (h("div", { class: "spinner-container" }, h("modus-spinner", { size: "1.5rem" })));
