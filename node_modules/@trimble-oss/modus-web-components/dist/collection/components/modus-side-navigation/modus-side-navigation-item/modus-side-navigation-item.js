// eslint-disable-next-line
import { h, Host } from "@stencil/core";
import { createPopper } from "@popperjs/core";
import { ModusIconMap } from "../../../icons/ModusIconMap";
export class ModusSideNavigationItem {
    constructor() {
        this.popperInstance = null;
        this.disabled = false;
        this.disableSelection = false;
        this.expanded = false;
        this.label = undefined;
        this.menuIcon = undefined;
        this.selected = false;
        this.showExpandIcon = false;
        this.isHeader = { enabled: false, items: [] };
        this.dropdownVisible = false;
    }
    async focusItem() {
        var _a;
        (_a = this._itemRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    watchExpanded() {
        if (this.dropdownVisible) {
            this.dropdownVisible = false;
        }
    }
    connectedCallback() {
        var _a;
        this._sideNavItemAdded.emit(this.element);
        if ((_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.enabled) {
            this.showExpandIcon = true;
        }
        document.addEventListener('mousedown', this.handleDocumentClick.bind(this));
    }
    disconnectedCallback() {
        this._sideNavItemRemoved.emit(this.element);
        this.destroyPopper();
        document.removeEventListener('mousedown', this.handleDocumentClick.bind(this));
    }
    handleListItemClick(itemId) {
        var _a;
        this.sideNavListItemClicked.emit({ id: itemId === null || itemId === void 0 ? void 0 : itemId.id });
        this.dropdownVisible = false; // Close the dropdown
        this.label = itemId === null || itemId === void 0 ? void 0 : itemId.label;
        this.menuIcon = (itemId === null || itemId === void 0 ? void 0 : itemId.icon) || this.menuIcon;
        // this.selected = this.disableSelection ? this.selected : !this.selected;
        (_a = this.sideNavItemHeaderClicked) === null || _a === void 0 ? void 0 : _a.emit({
            id: itemId === null || itemId === void 0 ? void 0 : itemId.id,
            selected: this === null || this === void 0 ? void 0 : this.selected,
        });
        this.destroyPopper(); // Destroy the popper to reset the positioning
    }
    findParentReference(element) {
        let currentNode = element;
        while (currentNode) {
            if (currentNode instanceof HTMLElement && currentNode.matches('nav')) {
                return currentNode;
            }
            if (currentNode instanceof ShadowRoot) {
                currentNode = currentNode.host;
            }
            else {
                currentNode = currentNode.parentElement || currentNode.getRootNode();
            }
        }
        return null;
    }
    setupPopper(expanded) {
        var _a;
        if (!this.referenceRef || !this.dropdownRef)
            return;
        const parentReference = (_a = this.findParentReference(this.element)) === null || _a === void 0 ? void 0 : _a.clientWidth;
        this.popperInstance = createPopper(this.referenceRef, this.dropdownRef, {
            placement: expanded ? 'bottom-start' : 'right',
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 2],
                        distance: 10,
                    },
                },
                {
                    name: 'setWidth',
                    enabled: true,
                    phase: 'write',
                    fn: ({ state }) => {
                        if (state.placement.startsWith('bottom')) {
                            state.elements.popper.style.width = `${parentReference - 2}px` || '300px';
                        }
                        else if (state.placement.startsWith('right')) {
                            state.elements.popper.style.width = `250px`;
                        }
                    },
                },
            ],
        });
    }
    destroyPopper() {
        if (this.popperInstance) {
            this.popperInstance.destroy();
            this.popperInstance = null;
        }
    }
    handleClick() {
        var _a, _b, _c, _d;
        if (this.disabled)
            return;
        const allItems = (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll('modus-side-navigation-item');
        if (allItems) {
            allItems === null || allItems === void 0 ? void 0 : allItems.forEach((item) => {
                const navItem = item;
                if (navItem !== this.element) {
                    navItem.selected = false;
                }
            });
        }
        this.selected = this.disableSelection ? this.selected : ((_b = this.isHeader) === null || _b === void 0 ? void 0 : _b.enabled) ? false : !this.selected;
        (_c = this.sideNavItemClicked) === null || _c === void 0 ? void 0 : _c.emit({
            id: this.element.id,
            selected: this === null || this === void 0 ? void 0 : this.selected,
        });
        if ((_d = this.isHeader) === null || _d === void 0 ? void 0 : _d.enabled) {
            this.dropdownVisible = !this.dropdownVisible;
            if (this.dropdownVisible) {
                this.setupPopper(this.expanded);
            }
            else {
                this.destroyPopper();
            }
            return;
        }
    }
    handleKeyDown(e) {
        if (e.code.toUpperCase() === 'ENTER' || e.code.toUpperCase() === 'SPACE') {
            this.handleClick();
        }
    }
    handleDocumentClick(event) {
        var _a, _b;
        const target = event.target;
        if (((_a = this.dropdownRef) === null || _a === void 0 ? void 0 : _a.contains(target)) || ((_b = this.referenceRef) === null || _b === void 0 ? void 0 : _b.contains(target))) {
            return;
        }
        this.dropdownVisible = false;
        this.destroyPopper();
    }
    renderDropdown() {
        var _a, _b;
        return (h("div", { class: `dropdown-list ${this.dropdownVisible ? 'visible' : 'hidden'} list-border animate-list`, ref: (el) => (this.dropdownRef = el) }, h("modus-list", { slot: "dropdownList" }, (_b = (_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.map((item) => (h("modus-list-item", { key: item.id, class: "list-item", borderless: true, onClick: () => this.handleListItemClick(item), onMouseDown: (e) => e.stopPropagation() }, h("span", { class: "dropdown-item" }, h(ModusIconMap, { icon: item === null || item === void 0 ? void 0 : item.icon, size: "24" }), h("span", { class: "menu-item-text" }, item === null || item === void 0 ? void 0 : item.label))))))));
    }
    render() {
        var _a, _b;
        const classes = {
            'side-nav-item': true,
            expanded: this.expanded,
            selected: this.selected,
            disabled: this.disabled,
        };
        return (h(Host, { key: 'd4bdedb88c38428854b9accdc6d446ddf4794847' }, ((_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.enabled) && this.renderDropdown(), h("modus-tooltip", { key: 'b69df05ede4b8851c12a46d69d80a06d5a5ae8ad', text: this.label, disabled: this.disabled, position: "right" }, h("li", { key: '6f2c8afa51dd8474e13f7a52c4e5f60a3f071a35', role: "treeitem", ref: (el) => (this.referenceRef = el), tabIndex: this.disabled ? -1 : 0, class: classes, onClick: () => this.handleClick(), onKeyDown: (e) => this.handleKeyDown(e), "aria-disabled": this.disabled ? 'true' : null, "aria-label": this.label, "aria-current": this.selected ? 'true' : null, onFocus: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("div", { key: '6c3d9a52b1030e512b78b23f7de8b71fce54d585', class: "menu-icon" }, h("slot", { key: '34f8cc40110e7b9485d2fd8cea553e0b16ea2672', name: "menu-icon" }), this.menuIcon && h(ModusIconMap, { icon: this.menuIcon, "aria-label": this.label, size: "24" })), this.expanded && h("div", { class: "menu-text" }, this.label), h("div", { key: '43ab3253e1e596bc733f2461f0bad687ccd54414', class: `level-icon ${((_b = this.isHeader) === null || _b === void 0 ? void 0 : _b.enabled) && this.expanded ? (this.dropdownVisible ? 'icon-dropdownvisible' : 'icon-expanded') : 'icon-collapsed'}` }, this.showExpandIcon && h(ModusIconMap, { icon: "chevron_right", size: "16" }))))));
    }
    static get is() { return "modus-side-navigation-item"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["modus-side-navigation-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["modus-side-navigation-item.css"]
        };
    }
    static get properties() {
        return {
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The disabled state of side navigation panel item."
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            },
            "disableSelection": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Disables item selection."
                },
                "attribute": "disable-selection",
                "reflect": true,
                "defaultValue": "false"
            },
            "expanded": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "attribute": "expanded",
                "reflect": true,
                "defaultValue": "false"
            },
            "label": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Label for the item and the tooltip message."
                },
                "attribute": "label",
                "reflect": true
            },
            "menuIcon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) A built-in menu icon string or a image url."
                },
                "attribute": "menu-icon",
                "reflect": false
            },
            "selected": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) The selected state of side navigation panel item."
                },
                "attribute": "selected",
                "reflect": true,
                "defaultValue": "false"
            },
            "showExpandIcon": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional) Shows the expand icon."
                },
                "attribute": "show-expand-icon",
                "reflect": true,
                "defaultValue": "false"
            },
            "isHeader": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "ModusHeaderNavigationItemInfo",
                    "resolved": "ModusHeaderNavigationItemInfo",
                    "references": {
                        "ModusHeaderNavigationItemInfo": {
                            "location": "import",
                            "path": "../modus-side-navigation.models",
                            "id": "src/components/modus-side-navigation/modus-side-navigation.models.tsx::ModusHeaderNavigationItemInfo"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "(optional to enable header dropdown feature)"
                },
                "defaultValue": "{ enabled: false, items: [] }"
            }
        };
    }
    static get states() {
        return {
            "dropdownVisible": {}
        };
    }
    static get events() {
        return [{
                "method": "sideNavItemClicked",
                "name": "sideNavItemClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when a mouse click or `Enter` key press on an item."
                },
                "complexType": {
                    "original": "{ id: string; selected: boolean }",
                    "resolved": "{ id: string; selected: boolean; }",
                    "references": {}
                }
            }, {
                "method": "sideNavItemHeaderClicked",
                "name": "sideNavItemHeaderClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{ id: string; selected: boolean }",
                    "resolved": "{ id: string; selected: boolean; }",
                    "references": {}
                }
            }, {
                "method": "sideNavItemFocus",
                "name": "sideNavItemFocus",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "An event that fires when an item is in focus."
                },
                "complexType": {
                    "original": "{ id: string }",
                    "resolved": "{ id: string; }",
                    "references": {}
                }
            }, {
                "method": "_sideNavItemAdded",
                "name": "_sideNavItemAdded",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                }
            }, {
                "method": "_sideNavItemRemoved",
                "name": "_sideNavItemRemoved",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Only to be used by modus side navigation components"
                        }],
                    "text": ""
                },
                "complexType": {
                    "original": "HTMLElement",
                    "resolved": "HTMLElement",
                    "references": {
                        "HTMLElement": {
                            "location": "global",
                            "id": "global::HTMLElement"
                        }
                    }
                }
            }, {
                "method": "sideNavListItemClicked",
                "name": "sideNavListItemClicked",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": ""
                },
                "complexType": {
                    "original": "{ id: string }",
                    "resolved": "{ id: string; }",
                    "references": {}
                }
            }];
    }
    static get methods() {
        return {
            "focusItem": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "expanded",
                "methodName": "watchExpanded"
            }];
    }
}
