import { r as registerInstance, c as createEvent, h, g as getElement } from './index-612c46d2.js';

const modusDropdownCss = ":host{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .dropdown.disabled{pointer-events:none}:host .dropdown:hover{cursor:pointer}:host .dropdown-list{border-collapse:collapse;display:none;max-height:200px;max-width:300px;opacity:1;overflow-x:hidden;overflow-y:auto;position:absolute;transition:opacity 0.2s ease-in-out;z-index:1}:host .dropdown-list.animate-list{display:block;opacity:0;visibility:hidden}:host .dropdown-list.visible{display:block;opacity:1;visibility:visible}:host .dropdown-list.list-border{border:1px solid var(--modus-dropdown-list-border-color, #6a6e79)}:host .dropdown-list.top{bottom:0}:host .dropdown-list.right{top:0}:host .dropdown-list.left{right:0;top:0}";
const ModusDropdownStyle0 = modusDropdownCss;

const ModusDropdown = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.dropdownClose = createEvent(this, "dropdownClose", 7);
        this.classByPlacement = new Map([
            ['top', 'top'],
            ['right', 'right'],
            ['bottom', 'bottom'],
            ['left', 'left'],
        ]);
        this.dropdownToggleClicked = false;
        this.animateList = false;
        this.ariaLabel = undefined;
        this.customPlacement = undefined;
        this.disabled = undefined;
        this.toggleDropdown = true;
        this.placement = 'bottom';
        this.showDropdownListBorder = true;
        this.borderRadius = '0';
        this.toggleElementId = undefined;
        this.disableCloseOnSelect = false;
        this.visible = undefined;
    }
    componentDidRender() {
        this.toggleElement = this.el.querySelector(`#${this.toggleElementId}`);
        if (!this.toggleElement) {
            throw Error('matching element not found for toggle-element-id');
        }
        if (this.disabled) {
            this.toggleElement.setAttribute('disabled', String(this.disabled));
        }
    }
    documentClickHandler(event) {
        // Close the dropdown when click is outside the current element.
        if (this.dropdownToggleClicked || event.target.closest(`#${this.toggleElementId}`)) {
            // Reset dropdown toggle click
            this.dropdownToggleClicked = false;
            return;
        }
        if (this.visible) {
            this.hideDropdown();
        }
    }
    documentKeyDownHandler(event) {
        if (event.key === 'Enter' || event.key === ' ') {
            if (this.disabled) {
                return;
            }
            if (this.dropdownToggleClicked || event.target.closest(`#${this.toggleElementId}`)) {
                this.dropdownToggleClicked = false;
                return;
            }
            else {
                this.hideDropdown();
            }
        }
        if (event.key === 'Escape' && this.visible) {
            this.hideDropdown();
            this.dropdownToggleClicked = false;
        }
    }
    onDisabledChange(newValue) {
        this.toggleElement.setAttribute('disabled', String(newValue));
    }
    hideDropdown() {
        this.visible = false;
        this.dropdownClose.emit();
    }
    handleDropdownClick(event) {
        if (this.disabled) {
            return;
        }
        if (event.target.closest(`#${this.toggleElementId}`) && this.toggleDropdown) {
            this.visible = !this.visible;
        }
        else {
            if (!this.disableCloseOnSelect) {
                this.visible = false;
            }
        }
        if (!this.visible) {
            this.dropdownClose.emit();
        }
        else {
            this.dropdownToggleClicked = true;
        }
    }
    render() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const listContainerClass = `dropdown-list ${this.visible ? 'visible' : 'hidden'} ${this.showDropdownListBorder ? 'list-border' : ''} ${this.animateList ? 'animate-list' : ''} ${this.classByPlacement.get(this.placement)}`;
        const left = this.placement === 'right' ? `${(_a = this.toggleElement) === null || _a === void 0 ? void 0 : _a.offsetWidth}px` : 'unset';
        const width = `${((_b = this.toggleElement) === null || _b === void 0 ? void 0 : _b.offsetWidth) ? (_c = this.toggleElement) === null || _c === void 0 ? void 0 : _c.offsetWidth : 0}px`;
        const dropdownClass = {
            dropdown: true,
            disabled: this.disabled,
        };
        return (h("div", { key: '2f74879137815b488816cf099d98b3563a440cee', "aria-label": this.ariaLabel || undefined, class: dropdownClass, onClick: (event) => this.handleDropdownClick(event) }, h("slot", { key: '57d725248db3285395c099db854176aa4f1c1b36', name: "dropdownToggle" }), h("div", { key: '606fbb3cb4d7dc2cf8739295d22324071999602a', class: listContainerClass, part: "dropdownListPanel", style: {
                top: ((_d = this.customPlacement) === null || _d === void 0 ? void 0 : _d.top) ? `${(_e = this.customPlacement) === null || _e === void 0 ? void 0 : _e.top}px` : '',
                right: ((_f = this.customPlacement) === null || _f === void 0 ? void 0 : _f.right) ? `${(_g = this.customPlacement) === null || _g === void 0 ? void 0 : _g.right}px` : '',
                left: ((_h = this.customPlacement) === null || _h === void 0 ? void 0 : _h.left) ? `${(_j = this.customPlacement) === null || _j === void 0 ? void 0 : _j.left}px` : left,
                bottom: ((_k = this.customPlacement) === null || _k === void 0 ? void 0 : _k.bottom) ? `${(_l = this.customPlacement) === null || _l === void 0 ? void 0 : _l.bottom}px` : '',
                'min-width': width,
                'border-radius': `${this.borderRadius}px`,
            } }, h("slot", { key: '404c76ba9506b37807e6b03a38c7647a89578163', name: "dropdownList" }))));
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "disabled": ["onDisabledChange"]
    }; }
};
ModusDropdown.style = ModusDropdownStyle0;

export { ModusDropdown as modus_dropdown };
