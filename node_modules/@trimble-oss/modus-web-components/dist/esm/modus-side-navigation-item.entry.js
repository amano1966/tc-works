import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-612c46d2.js';
import { M as ModusIconMap } from './ModusIconMap-c226cf23.js';
import { c as createPopper } from './popper-0fbeff6d.js';
import './IconChevronLeft-dfd06381.js';
import './IconChevronRight-5734b74b.js';
import './IconClose-be97678b.js';
import './IconExpand-ccaa9f2c.js';
import './IconVisibilityOn-6945ca0c.js';

const modusSideNavigationItemCss = ":host{display:block}.side-nav-item{align-items:center;background-color:var(--modus-side-navigation-item-bg, #fff);color:var(--modus-side-navigation-item-color, #252a2e);cursor:pointer;display:flex;fill:var(--modus-side-navigation-item-icon-color, #252a2e);height:3rem;position:relative;transition:top, left, height, width, opacity 0.2s ease-out 0s;z-index:0}.side-nav-item svg path{fill:var(--modus-side-navigation-item-icon-color, #252a2e)}.side-nav-item:hover:not(.disabled):not(.selected){background-color:var(--modus-side-navigation-item-hover-bg, #e0e1e9)}.side-nav-item .menu-icon{align-items:center;display:flex;justify-content:center;padding-left:1.25rem;z-index:0}.side-nav-item .menu-icon modus-tooltip{height:1.5rem;width:1.5rem}.side-nav-item .menu-icon img{filter:var(--modus-side-navigation-item-icon-filter)}.side-nav-item .menu-text{font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;overflow:hidden;padding-left:1rem;text-overflow:clip;white-space:nowrap}.side-nav-item .level-icon{align-items:center;display:flex;justify-content:center;margin-left:auto;padding:0 2px}.side-nav-item .level-icon svg path{fill:var(--modus-side-navigation-item-chevron-color, #252a2e)}.side-nav-item.expanded{transition:top, left, height, width, opacity 0.25s ease-in 0s}.side-nav-item.expanded .level-icon{padding:0 1rem}.side-nav-item.expanded .icon-expanded{transform:rotate(90deg)}.side-nav-item.expanded .icon-collapsed{transform:rotate(0deg)}.side-nav-item.expanded .icon-dropdownvisible{transform:rotate(270deg)}.side-nav-item.selected{background-color:var(--modus-side-navigation-item-active-bg, #217cbb);box-shadow:inset 0 0 2px var(--modus-side-navigation-item-active-border-color, #217cbb);color:var(--modus-side-navigation-item-active-color, #fff)}.side-nav-item.selected .menu-icon img{filter:var(--modus-side-navigation-item-icon-active-filter, invert(95%) sepia(100%) saturate(0%) hue-rotate(151deg) brightness(104%) contrast(105%))}.side-nav-item.selected svg path{fill:var(--modus-side-navigation-item-icon-active-color, #fff)}.side-nav-item.disabled{opacity:var(--modus-side-navigation-item-disabled-opacity, 0.3)}.dropdown.disabled{pointer-events:none}.dropdown:hover{cursor:pointer}.dropdown-list{border-collapse:collapse;border-radius:0.25rem;display:none;max-height:200px;opacity:1;overflow-x:auto;overflow-y:auto;position:absolute;transition:opacity 0.2s ease-in-out;z-index:1050}.dropdown-list.animate-list{display:block;opacity:0;visibility:hidden}.dropdown-list.visible{display:block;opacity:1;visibility:visible}.dropdown-list.list-border{border:1px solid var(--modus-dropdown-list-border-color, #6a6e79)}.dropdown-list.top{bottom:0}.dropdown-list.right{top:0}.dropdown-list.left{right:0;top:0}.dropdown-list .list-item::part(list-item-li){background-color:var(--modus-side-navigation-item-bg, #fff);border-radius:unset;color:var(--modus-side-navigation-item-color, #252a2e)}.dropdown-list .list-item::part(list-item-li):hover{background-color:var(--modus-side-navigation-item-hover-bg, #e0e1e9)}.dropdown-item{align-items:center;cursor:pointer;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;gap:1rem;padding:0.4rem}.dropdown-item .menu-item-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}";
const ModusSideNavigationItemStyle0 = modusSideNavigationItemCss;

const ModusSideNavigationItem = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.sideNavItemClicked = createEvent(this, "sideNavItemClicked", 7);
        this.sideNavItemHeaderClicked = createEvent(this, "sideNavItemHeaderClicked", 7);
        this.sideNavItemFocus = createEvent(this, "sideNavItemFocus", 7);
        this._sideNavItemAdded = createEvent(this, "_sideNavItemAdded", 7);
        this._sideNavItemRemoved = createEvent(this, "_sideNavItemRemoved", 7);
        this.sideNavListItemClicked = createEvent(this, "sideNavListItemClicked", 7);
        this.popperInstance = null;
        this.disabled = false;
        this.disableSelection = false;
        this.expanded = false;
        this.label = undefined;
        this.menuIcon = undefined;
        this.selected = false;
        this.showExpandIcon = false;
        this.isHeader = { enabled: false, items: [] };
        this.dropdownVisible = false;
    }
    async focusItem() {
        var _a;
        (_a = this._itemRef) === null || _a === void 0 ? void 0 : _a.focus();
    }
    watchExpanded() {
        if (this.dropdownVisible) {
            this.dropdownVisible = false;
        }
    }
    connectedCallback() {
        var _a;
        this._sideNavItemAdded.emit(this.element);
        if ((_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.enabled) {
            this.showExpandIcon = true;
        }
        document.addEventListener('mousedown', this.handleDocumentClick.bind(this));
    }
    disconnectedCallback() {
        this._sideNavItemRemoved.emit(this.element);
        this.destroyPopper();
        document.removeEventListener('mousedown', this.handleDocumentClick.bind(this));
    }
    handleListItemClick(itemId) {
        var _a;
        this.sideNavListItemClicked.emit({ id: itemId === null || itemId === void 0 ? void 0 : itemId.id });
        this.dropdownVisible = false; // Close the dropdown
        this.label = itemId === null || itemId === void 0 ? void 0 : itemId.label;
        this.menuIcon = (itemId === null || itemId === void 0 ? void 0 : itemId.icon) || this.menuIcon;
        // this.selected = this.disableSelection ? this.selected : !this.selected;
        (_a = this.sideNavItemHeaderClicked) === null || _a === void 0 ? void 0 : _a.emit({
            id: itemId === null || itemId === void 0 ? void 0 : itemId.id,
            selected: this === null || this === void 0 ? void 0 : this.selected,
        });
        this.destroyPopper(); // Destroy the popper to reset the positioning
    }
    findParentReference(element) {
        let currentNode = element;
        while (currentNode) {
            if (currentNode instanceof HTMLElement && currentNode.matches('nav')) {
                return currentNode;
            }
            if (currentNode instanceof ShadowRoot) {
                currentNode = currentNode.host;
            }
            else {
                currentNode = currentNode.parentElement || currentNode.getRootNode();
            }
        }
        return null;
    }
    setupPopper(expanded) {
        var _a;
        if (!this.referenceRef || !this.dropdownRef)
            return;
        const parentReference = (_a = this.findParentReference(this.element)) === null || _a === void 0 ? void 0 : _a.clientWidth;
        this.popperInstance = createPopper(this.referenceRef, this.dropdownRef, {
            placement: expanded ? 'bottom-start' : 'right',
            modifiers: [
                {
                    name: 'offset',
                    options: {
                        offset: [0, 2],
                        distance: 10,
                    },
                },
                {
                    name: 'setWidth',
                    enabled: true,
                    phase: 'write',
                    fn: ({ state }) => {
                        if (state.placement.startsWith('bottom')) {
                            state.elements.popper.style.width = `${parentReference - 2}px` || '300px';
                        }
                        else if (state.placement.startsWith('right')) {
                            state.elements.popper.style.width = `250px`;
                        }
                    },
                },
            ],
        });
    }
    destroyPopper() {
        if (this.popperInstance) {
            this.popperInstance.destroy();
            this.popperInstance = null;
        }
    }
    handleClick() {
        var _a, _b, _c, _d;
        if (this.disabled)
            return;
        const allItems = (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll('modus-side-navigation-item');
        if (allItems) {
            allItems === null || allItems === void 0 ? void 0 : allItems.forEach((item) => {
                const navItem = item;
                if (navItem !== this.element) {
                    navItem.selected = false;
                }
            });
        }
        this.selected = this.disableSelection ? this.selected : ((_b = this.isHeader) === null || _b === void 0 ? void 0 : _b.enabled) ? false : !this.selected;
        (_c = this.sideNavItemClicked) === null || _c === void 0 ? void 0 : _c.emit({
            id: this.element.id,
            selected: this === null || this === void 0 ? void 0 : this.selected,
        });
        if ((_d = this.isHeader) === null || _d === void 0 ? void 0 : _d.enabled) {
            this.dropdownVisible = !this.dropdownVisible;
            if (this.dropdownVisible) {
                this.setupPopper(this.expanded);
            }
            else {
                this.destroyPopper();
            }
            return;
        }
    }
    handleKeyDown(e) {
        if (e.code.toUpperCase() === 'ENTER' || e.code.toUpperCase() === 'SPACE') {
            this.handleClick();
        }
    }
    handleDocumentClick(event) {
        var _a, _b;
        const target = event.target;
        if (((_a = this.dropdownRef) === null || _a === void 0 ? void 0 : _a.contains(target)) || ((_b = this.referenceRef) === null || _b === void 0 ? void 0 : _b.contains(target))) {
            return;
        }
        this.dropdownVisible = false;
        this.destroyPopper();
    }
    renderDropdown() {
        var _a, _b;
        return (h("div", { class: `dropdown-list ${this.dropdownVisible ? 'visible' : 'hidden'} list-border animate-list`, ref: (el) => (this.dropdownRef = el) }, h("modus-list", { slot: "dropdownList" }, (_b = (_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.map((item) => (h("modus-list-item", { key: item.id, class: "list-item", borderless: true, onClick: () => this.handleListItemClick(item), onMouseDown: (e) => e.stopPropagation() }, h("span", { class: "dropdown-item" }, h(ModusIconMap, { icon: item === null || item === void 0 ? void 0 : item.icon, size: "24" }), h("span", { class: "menu-item-text" }, item === null || item === void 0 ? void 0 : item.label))))))));
    }
    render() {
        var _a, _b;
        const classes = {
            'side-nav-item': true,
            expanded: this.expanded,
            selected: this.selected,
            disabled: this.disabled,
        };
        return (h(Host, { key: 'd4bdedb88c38428854b9accdc6d446ddf4794847' }, ((_a = this.isHeader) === null || _a === void 0 ? void 0 : _a.enabled) && this.renderDropdown(), h("modus-tooltip", { key: 'b69df05ede4b8851c12a46d69d80a06d5a5ae8ad', text: this.label, disabled: this.disabled, position: "right" }, h("li", { key: '6f2c8afa51dd8474e13f7a52c4e5f60a3f071a35', role: "treeitem", ref: (el) => (this.referenceRef = el), tabIndex: this.disabled ? -1 : 0, class: classes, onClick: () => this.handleClick(), onKeyDown: (e) => this.handleKeyDown(e), "aria-disabled": this.disabled ? 'true' : null, "aria-label": this.label, "aria-current": this.selected ? 'true' : null, onFocus: () => this.sideNavItemFocus.emit({ id: this.element.id }) }, h("div", { key: '6c3d9a52b1030e512b78b23f7de8b71fce54d585', class: "menu-icon" }, h("slot", { key: '34f8cc40110e7b9485d2fd8cea553e0b16ea2672', name: "menu-icon" }), this.menuIcon && h(ModusIconMap, { icon: this.menuIcon, "aria-label": this.label, size: "24" })), this.expanded && h("div", { class: "menu-text" }, this.label), h("div", { key: '43ab3253e1e596bc733f2461f0bad687ccd54414', class: `level-icon ${((_b = this.isHeader) === null || _b === void 0 ? void 0 : _b.enabled) && this.expanded ? (this.dropdownVisible ? 'icon-dropdownvisible' : 'icon-expanded') : 'icon-collapsed'}` }, this.showExpandIcon && h(ModusIconMap, { icon: "chevron_right", size: "16" }))))));
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "expanded": ["watchExpanded"]
    }; }
};
ModusSideNavigationItem.style = ModusSideNavigationItemStyle0;

export { ModusSideNavigationItem as modus_side_navigation_item };
