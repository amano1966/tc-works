'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-8ad089ae.js');
const ModusIconMap = require('./ModusIconMap-4076f8df.js');
require('./IconChevronLeft-cd7905fc.js');
require('./IconChevronRight-3b379c08.js');
require('./IconClose-cec27da2.js');
require('./IconExpand-15ffe311.js');
require('./IconVisibilityOn-0cf159be.js');

const modusMessageCss = ".modus-message{align-items:center;border-radius:0.25rem;display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;padding:0.5rem}.modus-message .icon{align-items:center;display:flex;margin-right:0.5rem}.modus-message.info{background-color:var(--modus-message-info-bg, #dcedf9);color:var(--modus-message-info-color, #0063a3)}.modus-message.info svg path{fill:var(--modus-message-info-color, #0063a3) !important}.modus-message.question{background-color:var(--modus-message-question-bg, #f1f1f6);color:var(--modus-message-question-color, #6a6e79)}.modus-message.question svg path{fill:var(--modus-message-question-color, #6a6e79) !important}@media (forced-colors: active){.modus-message{border:1px solid transparent}}";
const ModusMessageStyle0 = modusMessageCss;

const ModusMessage = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.classByType = new Map([
            ['info', 'info'],
            ['question', 'question'],
        ]);
        this.ariaLabel = undefined;
        this.icon = undefined;
        this.type = 'info';
    }
    render() {
        const className = `modus-message ${this.classByType.get(this.type)}`;
        return (index.h("div", { key: '2b980a6a5e174df1b172f910bbf8d5d15945c501', "aria-label": this.ariaLabel || undefined, class: className, role: "note" }, index.h("span", { key: 'bc2516de0ccef91b97d48e4b3e5ffd28fce185ab', class: "icon" }, this.icon ? (index.h(ModusIconMap.ModusIconMap, { icon: this.icon, size: "18" })) : this.type === 'info' ? (index.h(ModusIconMap.IconInfo, { size: "18" })) : this.type === 'question' ? (index.h(ModusIconMap.IconHelp, { size: "18" })) : null), index.h("span", { key: '05bea7606ec57b12cbb209dea6dbf474b6b81d1d', class: "message" }, index.h("slot", { key: 'ed0cd66cec69eafa299fd74d7a6b0d3302c2c52d' }))));
    }
};
ModusMessage.style = ModusMessageStyle0;

exports.modus_message = ModusMessage;
