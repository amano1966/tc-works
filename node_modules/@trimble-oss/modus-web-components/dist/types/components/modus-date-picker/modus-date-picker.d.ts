import { ModusDateInputEventDetails } from '../modus-date-input/utils/modus-date-input.models';
import { Placement } from '@floating-ui/dom';
export declare class ModusDatePicker {
    element: HTMLElement;
    /** (optional) Label for the field. */
    label: string;
    /** (optional) The placement of the calendar popup */
    position: Placement | 'auto' | 'auto-start' | 'auto-end';
    /** (optional) Function to check if a date is enabled
     * If true, the day will be enabled/interactive. If false, the day will be disabled/non-interactive.
     * The function accepts an ISO 8601 date string of a given day. By default, all days are enabled.
     * Developers can use this function to write custom logic to disable certain days.
     * The function is called for each rendered calendar day.
     * This function should be optimized for performance to avoid jank.
     * */
    isDateEnabled: (dateIsoString: string) => boolean | undefined;
    /** Needed for a better control over the state and avoid re-renders */
    _forceUpdate: {};
    _showCalendar: boolean;
    _showYearArrows: boolean;
    private _calendar;
    private _dateInputs;
    private _locale;
    private get _currentInput();
    componentWillLoad(): void;
    componentDidUpdate(): void;
    disconnectedCallback(): void;
    cleanupPopover: () => void | undefined;
    configureCalendarPopover(): void;
    /** Handlers */
    handleCalendarIconClick(event: CustomEvent<ModusDateInputEventDetails>): void;
    handleClickOutside(event: MouseEvent): void;
    handleDateInputValue(event: CustomEvent<ModusDateInputEventDetails>): void;
    handleDateInputBlur(): void;
    handleSlotChange(): void;
    /** Helpers */
    addMonthOffset(offset: number): void;
    addYearOffset(offset: number): void;
    applyDateRangeRules(startDate: any, endDate: any): void;
    compare(date1: Date, date2: Date): number;
    forceUpdate(): void;
    findDatePositionsInARange(date: Date, startDate: Date, endDate: Date): {
        [key: string]: boolean;
    };
    gotoDateBeingPicked(pickedDate: Date): void;
    private goToNearestBoundaryDate;
    isInvalidDateRange: (startDate: any, endDate: any) => boolean;
    pickCalendarDate(date: Date): void;
    showYearChange(show?: boolean): void;
    private isWithinCurrentMinMax;
    toggleCalendar(val?: boolean): void;
    private renderCalendarBody;
    private renderCalendarHeader;
    render(): any;
}
