import { EventEmitter } from '../../stencil-public-runtime';
export declare class ModusNumberInput {
    /** Displayed only when the input is not focused. */
    formattedValue: any;
    /** (optional) The input's aria-label. */
    ariaLabel: string | null;
    /** (optional) The input's currency */
    currency: string;
    /** (optional) Whether the input is disabled. */
    disabled: boolean;
    /** (optional) The input's error state text. */
    errorText: string;
    /** (optional) The input's helper text displayed below the input. */
    helperText: string;
    /** (optional) The input's label. */
    label: string;
    /** (optional) The input's locale */
    locale: string;
    /** (optional) The input's maximum value. */
    maxValue: number;
    /** (optional) The input's minimum value. */
    minValue: number;
    /** (optional) The input's placeholder text. */
    placeholder: string;
    /** (optional) Whether the input's content is read-only */
    readOnly: boolean;
    /** (optional) Whether the input is required. */
    required: boolean;
    /** (optional) The input's size. */
    size: 'medium' | 'large';
    /** (optional) The input's step. */
    step: number;
    /** (optional) The input's text alignment. */
    textAlign: 'left' | 'right';
    /** (optional) The input's valid state text. */
    validText: string;
    /** (optional) The input's value. */
    value: string;
    /** An event that fires on input value change. */
    valueChange: EventEmitter<string>;
    private inputId;
    private inputFocused;
    classBySize: Map<string, string>;
    input: HTMLInputElement;
    handleOnInput(): void;
    /** Focus the input. */
    focusInput(): Promise<void>;
    watchValue(newValue: string, oldValue: string): void;
    getFormattedValue(): any;
    handleOnBlur: () => void;
    handleOnFocus: () => void;
    render(): unknown;
}
