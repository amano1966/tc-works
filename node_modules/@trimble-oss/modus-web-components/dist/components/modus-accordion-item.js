import { p as proxyCustomElement, H, d as createEvent, h } from './p-85681586.js';
import { g as generateElementId } from './p-ce031ddc.js';
import { M as ModusIconMap, I as IconExpandMoreCircle, a as IconExpandMore } from './p-cf76d4e3.js';

const modusAccordionItemCss = ".accordion-item{background-color:var(--modus-accordion-item-bg, #fff);border-bottom:0.0625rem solid var(--modus-accordion-item-border-color, #cbcdd6);color:var(--modus-accordion-item-color, #252a2e);display:flex;flex-direction:column;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}.accordion-item[aria-expanded=true] .header:has(div svg.icon-expand-more){border-left:4px solid var(--modus-accordion-item-expanded-border-left-color, #0063a3);padding-left:12px}.accordion-item:has(div svg.icon-expand-more) .body{box-shadow:4px 0 0 var(--modus-accordion-item-expanded-border-left-color, #0063a3) inset}.accordion-item .header{align-items:center;cursor:pointer;display:inline-flex;font-size:0.875rem;font-weight:600;height:48px;padding:0 16px}.accordion-item .header .icon{margin-right:0.5rem;margin-top:0.25rem}.accordion-item .header .label-container{align-items:center;display:flex;gap:1.5rem;overflow:hidden;padding:0.75rem 0;width:100%}.accordion-item .header .label-container .supporting-label{color:var(--modus-accordion-label-color, #6a6e79);font-size:0.75rem;margin-left:auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.accordion-item .header.disabled{cursor:auto;opacity:0.4}.accordion-item .header.expanded{color:var(--modus-accordion-item-header-expand-color, #252a2e)}.accordion-item .header.expanded:has(div svg.icon-expand-more){background-color:var(--modus-accordion-item-header-expanded-bg, #dcedf9)}.accordion-item .header:hover:not(.disabled){background-color:var(--modus-accordion-item-header-hover-bg, #e0e1e9)}.accordion-item .header.small{font-size:0.75rem;height:2.5rem}.accordion-item .header.small .label-container{gap:1rem;padding:0.625rem 0}.accordion-item .header.small .label-container .supporting-label{font-size:0.625rem}.accordion-item .header.small .chevron-container{margin-left:16px}.accordion-item .header .chevron-container{align-items:center;display:flex;margin-left:24px;transition:transform 0.2s ease-in-out}.accordion-item .header .chevron-container.reverse{transform:rotate(-180deg)}.accordion-item .header .chevron-container svg path{fill:var(--modus-chevron-color, #6a6e79)}.accordion-item .body{overflow:hidden}.accordion-item .body.collapse.show{transition:height 0.35s ease-out}.accordion-item .body .body-content{font-size:0.875rem;padding:1rem}.accordion-item .body.collapse:not(.show){display:none}.accordion-item .body.collapsing{height:0;position:relative;transition:all 0.35s ease-out}@media (prefers-reduced-motion: reduce){.accordion-item .body.collapsing{transition:none}}.accordion-item:has(>.body.collapsing) .header:has(div svg.icon-expand-more){background-color:var(--modus-accordion-item-header-expanded-bg, #dcedf9);border-left:4px solid var(--modus-blue);padding-left:12px}";
const ModusAccordionItemStyle0 = modusAccordionItemCss;

const ModusAccordionItem$1 = /*@__PURE__*/ proxyCustomElement(class ModusAccordionItem extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.closed = createEvent(this, "closed", 7);
        this.opened = createEvent(this, "opened", 7);
        this.expandedContentId = generateElementId() + '_accordion-item';
        this.classBySize = new Map([
            ['condensed', 'small'],
            ['standard', 'standard'],
        ]);
        // Trick to restart an element's animation
        // see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation
        // taken from: https://getbootstrap.com/docs/5.3/dist/js/bootstrap.js
        this.reflow = (element) => {
        };
        this.disabled = undefined;
        this.expandButtonType = 'standardArrow';
        this.expanded = undefined;
        this.headerText = undefined;
        this.icon = undefined;
        this.supportingLabel = undefined;
        this.size = 'standard';
    }
    componentDidLoad() {
        // Initialize MutationObserver to detect DOM change
        this.contentObserver = new MutationObserver(() => this.onContentChange());
        this.contentObserver.observe(this.accordionBodyRef, {
            childList: true,
            subtree: true,
            characterData: true,
            attributes: true,
        });
        // Initialize ResizeObserver for more reliable size change detection
        this.resizeObserver = new ResizeObserver(() => this.onContentChange());
        this.resizeObserver.observe(this.accordionBodyRef.querySelector('.body-content'));
        // Set initial height if expanded
        if (this.expanded) {
            this.adjustHeight();
        }
    }
    disconnectedCallback() {
        if (this.contentObserver) {
            this.contentObserver.disconnect();
        }
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
        }
        if (this.accordionOpenTimeout) {
            clearTimeout(this.accordionOpenTimeout);
        }
        if (this.accordionCloseTimeout) {
            clearTimeout(this.accordionCloseTimeout);
        }
    }
    onContentChange() {
        if (this.expanded && this.accordionBodyRef) {
            this.adjustHeight();
        }
    }
    adjustHeight() {
        requestAnimationFrame(() => {
            if (this.accordionBodyRef && this.expanded && !this.accordionBodyRef.classList.contains('collapsing')) {
                const oldHeight = this.accordionBodyRef.style.height;
                this.accordionBodyRef.style.height = '';
                const scrollHeight = this.accordionBodyRef.scrollHeight;
                this.accordionBodyRef.style.height = oldHeight;
                this.reflow(this.accordionBodyRef);
                requestAnimationFrame(() => {
                    this.accordionBodyRef.style.height = `${scrollHeight}px`;
                });
            }
        });
    }
    handleHeaderClick() {
        if (this.disabled) {
            return;
        }
        this.chevronContainerRef.classList.toggle('reverse');
        if (!this.expanded) {
            this.accordionBodyRef.classList.remove('collapse');
            this.accordionBodyRef.classList.add('collapsing');
            this.accordionBodyRef.style.height = '0';
            this.reflow(this.accordionBodyRef);
            requestAnimationFrame(() => {
                const scrollHeight = this.accordionBodyRef.scrollHeight;
                this.accordionBodyRef.style.height = `${scrollHeight}px`;
                this.accordionOpenTimeout = setTimeout(() => {
                    if (this.accordionBodyRef) {
                        this.accordionBodyRef.classList.remove('collapsing');
                        this.accordionBodyRef.classList.add('show');
                        this.accordionBodyRef.classList.add('collapse');
                        this.accordionBodyRef.style.height = '';
                        this.expanded = true;
                        this.opened.emit();
                    }
                }, 350);
            });
        }
        else {
            const currentHeight = this.accordionBodyRef.getBoundingClientRect().height;
            this.accordionBodyRef.style.height = `${currentHeight}px`;
            this.reflow(this.accordionBodyRef);
            this.accordionBodyRef.classList.add('collapsing');
            this.accordionBodyRef.classList.remove('collapse', 'show');
            requestAnimationFrame(() => {
                this.accordionBodyRef.style.height = '0';
                this.accordionCloseTimeout = setTimeout(() => {
                    if (this.accordionBodyRef) {
                        this.accordionBodyRef.classList.remove('collapsing');
                        this.accordionBodyRef.classList.add('collapse');
                        this.accordionBodyRef.style.height = '';
                        this.expanded = false;
                        this.closed.emit();
                    }
                }, 350);
            });
        }
    }
    handleKeydown(event) {
        if (event.code !== 'Enter') {
            return;
        }
        this.handleHeaderClick();
    }
    renderIcon() {
        const iconSize = this.size === 'condensed' ? '20' : '24';
        return (h("span", { class: "icon" }, h(ModusIconMap, { icon: this.icon, size: iconSize })));
    }
    render() {
        const sizeClass = `${this.classBySize.get(this.size)}`;
        const disabledClass = `${this.disabled ? 'disabled' : ''}`;
        const expandedClass = `${this.expanded ? 'expanded' : ''}`;
        const bodyClass = `body ${sizeClass} collapse${this.expanded ? ' show' : ''}`;
        const headerClass = `header ${sizeClass} ${disabledClass} ${expandedClass}`;
        const expandIconSize = this.size === 'condensed' ? '20' : '24';
        return (h("div", { key: 'ffbaddcfb8629176926443aa42edefb983658f1d', "aria-disabled": this.disabled ? 'true' : undefined, "aria-expanded": this.expanded ? 'true' : undefined, class: "accordion-item" }, h("div", { key: 'eeeea7eb6ddb35825b3c2630b615da40dc7fb030', class: headerClass, role: "button", "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.expandedContentId, onClick: () => this.handleHeaderClick(), onKeyDown: (event) => this.handleKeydown(event), tabIndex: this.disabled ? -1 : 0 }, this.icon ? this.renderIcon() : null, h("div", { key: '710d83ef1093fa97062c9ab33d95fd1e9b2d72c3', class: "label-container" }, h("span", { key: '744f788063a01f913274eb743242476048362030', class: "title" }, this.headerText), this.supportingLabel && h("span", { class: "supporting-label" }, this.supportingLabel)), h("div", { class: `chevron-container ${this.expanded ? 'reverse' : ''} `, ref: (el) => (this.chevronContainerRef = el) }, this.expandButtonType == 'circleArrow' ? (h(IconExpandMoreCircle, { size: expandIconSize })) : (h(IconExpandMore, { size: expandIconSize })))), h("div", { key: 'b3c47cb05778da5d72005d01d25ada4844248fa4', id: this.expandedContentId, class: bodyClass, ref: (el) => (this.accordionBodyRef = el) }, h("div", { key: 'ff7a12e88cb25c040b6206f98957b1b3242d3ed7', class: "body-content" }, h("slot", { key: '194aaf3f2480c679030f4de8d102d423897c14e6' })))));
    }
    static get style() { return ModusAccordionItemStyle0; }
}, [1, "modus-accordion-item", {
        "disabled": [4],
        "expandButtonType": [1, "expand-button-type"],
        "expanded": [1028],
        "headerText": [1, "header-text"],
        "icon": [1],
        "supportingLabel": [1, "supporting-label"],
        "size": [1]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-accordion-item"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-accordion-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusAccordionItem$1);
            }
            break;
    } });
}

const ModusAccordionItem = ModusAccordionItem$1;
const defineCustomElement = defineCustomElement$1;

export { ModusAccordionItem, defineCustomElement };
