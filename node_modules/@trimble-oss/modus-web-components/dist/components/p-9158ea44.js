import { p as proxyCustomElement, H, d as createEvent, h } from './p-85681586.js';
import { g as generateElementId, c as createGuid } from './p-ce031ddc.js';

const modusSelectCss = ":host{color:var(--modus-input-color, #252a2e);font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:relative}:host .label-container{align-items:baseline;display:flex}:host .label-container label{color:var(--modus-input-label-color, #464b52);font-size:0.75rem;font-weight:700;margin:0 0.25rem 0.25rem 0}:host .label-container .required{color:var(--modus-input-validation-error-color, #da212c)}:host .input-container{position:relative}:host .input-container:hover{cursor:pointer}:host .input-container select{align-items:center;appearance:none;background-color:var(--modus-input-bg, #fff);background-image:var(--modus-select-bg-image, url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\"%3e%3cpath fill=\"none\" stroke=\"%231b1a26\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m2 5 6 6 6-6\"/%3e%3c/svg>'));background-position:right 0.5rem center;background-repeat:no-repeat;background-size:16px 12px;border:solid 0.0625rem var(--modus-input-border-color, #6a6e79);border-radius:4px;color:var(--modus-input-color, #464b52);display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.75rem;height:2rem;padding-left:0.625rem;padding-right:2rem;position:relative;width:100%}:host .input-container select.disabled{background-color:var(--modus-input-disabled-bg, #e0e1e9);border-color:transparent}:host .input-container select:hover{cursor:pointer}:host .input-container select:focus{outline:none}:host .input-container select:focus-within{border-color:var(--modus-input-border-active-color, #217cbb);box-shadow:0 0 0 1px var(--modus-input-border-active-color, #217cbb)}:host .input-container select.large{font-size:0.875rem;height:3rem}:host .input-container select.error{border-color:var(--modus-input-validation-error-color, #da212c);box-shadow:0 0 0 1px var(--modus-input-validation-error-color, #da212c)}:host .input-container select.valid{border-color:var(--modus-input-validation-success-color, #006638);box-shadow:0 0 0 1px var(--modus-input-validation-success-color, #006638)}:host .input-container select.fit-parent{border:none;height:inherit}:host .sub-text{font-size:0.75rem;margin-top:0.25rem}:host .sub-text.helper{color:var(--modus-input-label-color, #464b52)}:host .sub-text.error{color:var(--modus-input-validation-error-color, #da212c)}:host .sub-text.valid{color:var(--modus-input-validation-success-color, #006638)}";
const ModusSelectStyle0 = modusSelectCss;

const ModusSelect = /*@__PURE__*/ proxyCustomElement(class ModusSelect extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.valueChange = createEvent(this, "valueChange", 7);
        this.inputBlur = createEvent(this, "inputBlur", 7);
        this.selectId = generateElementId() + '_select';
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['large', 'large'],
        ]);
        this.ariaLabel = undefined;
        this.disabled = undefined;
        this.errorText = undefined;
        this.helperText = undefined;
        this.label = undefined;
        this.options = [];
        this.optionsDisplayProp = undefined;
        this.placeholder = 'Please Select';
        this.required = undefined;
        this.size = 'medium';
        this.validText = undefined;
        this.value = undefined;
        this.internalValue = undefined;
        this.optionIdMap = new Map();
    }
    handleValueChange(newValue) {
        this.internalValue = newValue;
    }
    /** Focus the input. */
    async focusInput() {
        this.selectInput.focus();
    }
    connectedCallback() {
        this.internalValue = this.value;
    }
    handleOptionSelect(option) {
        this.valueChange.emit(option);
    }
    handleSelectChange(event) {
        const target = event.target;
        const selectedId = target.value;
        const option = this.optionIdMap.get(selectedId);
        this.handleOptionSelect(option);
    }
    renderSubText() {
        if (this.errorText) {
            return h("label", { class: "sub-text error" }, this.errorText);
        }
        else if (this.validText) {
            return h("label", { class: "sub-text valid" }, this.validText);
        }
        else if (this.helperText) {
            return h("label", { class: "sub-text helper" }, this.helperText);
        }
        return null;
    }
    renderLabel() {
        return this.label || this.required ? (h("div", { class: "label-container" }, this.label ? h("label", { htmlFor: this.selectId }, this.label) : null, this.required ? h("span", { class: "required" }, "*") : null)) : null;
    }
    renderOptions() {
        var _a;
        return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
            const optionId = createGuid();
            this.optionIdMap.set(optionId, option);
            return (h("option", { value: optionId, key: optionId, selected: option[this.optionsDisplayProp] === this.internalValue }, option[this.optionsDisplayProp]));
        });
    }
    render() {
        var _a;
        const selectClass = `${this.classBySize.get(this.size)} ${this.errorText ? 'error' : this.validText ? 'valid' : this.disabled ? 'disabled' : ''}`;
        return (h("div", { key: 'ab38018e065d411d799c8c79d517ed0342a5fae8', class: this.disabled ? 'disabled' : undefined }, this.renderLabel(), h("span", { key: 'ad4acad2bfd52ac2ae4e9408d70d9a8e8a92d121', class: "input-container" }, h("select", { key: 'e9c56542b567e6a638c00854ac8b7275a56b2256', part: "input", ref: (el) => (this.selectInput = el), disabled: this.disabled, id: this.selectId, class: selectClass, "aria-label": this.ariaLabel || undefined, onBlur: (e) => this.inputBlur.emit(e), onChange: (event) => {
                this.handleSelectChange(event);
            }, "aria-invalid": !!this.errorText, "aria-required": (_a = this.required) === null || _a === void 0 ? void 0 : _a.toString() }, h("option", { key: '0ae21d39e25fbe3cadc84a25705744a46a6b9a85', value: "", disabled: true, selected: true }, this.placeholder), this.renderOptions()), this.renderSubText())));
    }
    static get watchers() { return {
        "value": ["handleValueChange"]
    }; }
    static get style() { return ModusSelectStyle0; }
}, [1, "modus-select", {
        "ariaLabel": [1, "aria-label"],
        "disabled": [4],
        "errorText": [1, "error-text"],
        "helperText": [1, "helper-text"],
        "label": [1],
        "options": [16],
        "optionsDisplayProp": [1, "options-display-prop"],
        "placeholder": [1],
        "required": [4],
        "size": [1],
        "validText": [1, "valid-text"],
        "value": [16],
        "internalValue": [32],
        "optionIdMap": [32],
        "focusInput": [64]
    }, undefined, {
        "value": ["handleValueChange"]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-select"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-select":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusSelect);
            }
            break;
    } });
}

export { ModusSelect as M, defineCustomElement as d };
