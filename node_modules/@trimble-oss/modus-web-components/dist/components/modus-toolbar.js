import { p as proxyCustomElement, H, h, c as Host } from './p-85681586.js';
import { d as defineCustomElement$4 } from './p-56367692.js';
import { d as defineCustomElement$3 } from './p-ce52cff9.js';
import { d as defineCustomElement$2 } from './p-03a9687b.js';

const modusToolbarCss = ":host{align-items:center;background-color:var(--modus-toolbar-bg, #fff);border-radius:4px;bottom:20px;box-shadow:0 0 10px 0 rgba(0, 0, 0, 0.2);display:flex;padding:1px;position:fixed;right:20px;z-index:9999}modus-button{margin:2px !important}";
const ModusToolbarStyle0 = modusToolbarCss;

const ModusToolbar$1 = /*@__PURE__*/ proxyCustomElement(class ModusToolbar extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.ariaLabel = undefined;
        this.disabled = undefined;
    }
    createButton(child) {
        const className = 'modus-button';
        const iconOnly = child.getAttribute('icon-only');
        const ariaLabel = child.getAttribute('aria-label') || 'button';
        const label = child.textContent ? child.textContent.trim() : '';
        return (h("modus-button", { ariaLabel: ariaLabel, "button-style": "borderless", color: "secondary", class: className, disabled: this.disabled, "icon-only": iconOnly }, label));
    }
    renderButtons() {
        const children = Array.from(this.host.children);
        const buttons = children.map((child) => {
            if (child.tagName === 'MODUS-BUTTON') {
                return this.createButton(child);
            }
            else if (child.tagName === 'MODUS-TOOLTIP') {
                const tooltipChild = child.children[0];
                const tooltipText = child.getAttribute('text');
                const tooltipPosition = child.getAttribute('position');
                if (tooltipChild && tooltipChild.tagName === 'MODUS-BUTTON') {
                    return (h("modus-tooltip", { text: tooltipText, position: tooltipPosition }, this.createButton(tooltipChild)));
                }
            }
            else {
                return h("modus-divider", null);
            }
        });
        return buttons;
    }
    render() {
        return (h(Host, { key: '19c48018be6b32e711220e7db16d535aeb8da66a', "aria-label": this.ariaLabel || undefined, role: "toolbar" }, this.renderButtons()));
    }
    get host() { return this; }
    static get style() { return ModusToolbarStyle0; }
}, [1, "modus-toolbar", {
        "ariaLabel": [1, "aria-label"],
        "disabled": [4]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-toolbar", "modus-button", "modus-divider", "modus-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-toolbar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusToolbar$1);
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "modus-divider":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const ModusToolbar = ModusToolbar$1;
const defineCustomElement = defineCustomElement$1;

export { ModusToolbar, defineCustomElement };
