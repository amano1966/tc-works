import { p as proxyCustomElement, H, d as createEvent, h as h$1 } from './p-85681586.js';
import { I as IconClose } from './p-89c176f3.js';
import { I as IconCheck } from './p-c8e30a17.js';
import { M as ModusIconMap } from './p-cf76d4e3.js';
import { h } from './p-5f965237.js';

// eslint-disable-next-line
const IconRemove = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-remove ${props.pressed ? 'pressed' : ''}`, height: (_a = props.size) !== null && _a !== void 0 ? _a : 16, width: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? (event) => props.onClick(event) : null, viewBox: "0 0 24 24", fill: "none" },
        h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M3 12C3 7.03691 7.03691 3 12 3C16.9623 3 21 7.03691 21 12C21 16.9623 16.9623 21 12 21C7.03691 21 3 16.9623 3 12ZM15.8889 7L17 8.11113L13.1111 12L17 15.8889L15.8889 17L12 13.1111L8.11113 17L7 15.8889L10.8889 12L7 8.11113L8.11113 7L12 10.8889L15.8889 7Z", fill: (_c = props.color) !== null && _c !== void 0 ? _c : 'currentColor' }),
        h("mask", { id: "mask0", "mask-type": "alpha", maskUnits: "userSpaceOnUse", x: "3", y: "3", width: "18", height: "18" },
            h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M3 12C3 7.03691 7.03691 3 12 3C16.9623 3 21 7.03691 21 12C21 16.9623 16.9623 21 12 21C7.03691 21 3 16.9623 3 12ZM15.8889 7L17 8.11113L13.1111 12L17 15.8889L15.8889 17L12 13.1111L8.11113 17L7 15.8889L10.8889 12L7 8.11113L8.11113 7L12 10.8889L15.8889 7Z", fill: "white" })),
        h("g", { mask: "url(#mask0)" })));
};

const modusChipCss = ".modus-chip{align-items:center;background-color:var(--modus-chip-bg, #cbcdd6);border:0.0625rem solid var(--modus-chip-bg, #cbcdd6);border-radius:1rem;color:var(--modus-chip-color, #353a40);cursor:pointer;display:inline-flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1.875rem;justify-content:center;margin:0.125rem 0;padding:0.125rem 0.25rem;vertical-align:middle}.modus-chip.no-left-icon.no-right-icon{padding:0.125rem 1rem}.modus-chip.small{height:1.5rem}.modus-chip.small span{font-size:0.75rem}.modus-chip.small img{height:1rem;width:1rem}.modus-chip.small svg{height:1rem;width:1rem}.modus-chip img{border-radius:50%;height:1rem;width:1rem}.modus-chip span{display:inline-block;font-size:0.8125rem;font-weight:600;margin:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.modus-chip svg:not(.icon-remove) path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip .icon-remove,.modus-chip .icon-remove path{fill:var(--modus-chip-color, #353a40) !important;flex-shrink:0}.modus-chip.style-outline{background-color:transparent;border:0.0625rem solid var(--modus-chip-outline-border-color, #90939f);color:var(--modus-chip-outline-color, #353a40)}.modus-chip.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-color, #353a40) !important}.modus-chip.style-outline .icon-remove,.modus-chip.style-outline .icon-remove path{fill:var(--modus-chip-outline-color, #353a40) !important}.modus-chip.style-outline.disabled{opacity:var(--modus-chip-outline-disabled-opacity, 0.3)}.modus-chip:hover{background-color:var(--modus-chip-hover-bg, #e0e1e9);border:0.0625rem solid var(--modus-chip-hover-bg, #e0e1e9);color:var(--modus-chip-color, #353a40)}.modus-chip:hover svg:not(.icon-remove) path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip:hover .icon-remove,.modus-chip:hover .icon-remove path{fill:var(--modus-chip-color, #353a40) !important}.modus-chip:hover.style-outline{background-color:var(--modus-chip-outline-hover-bg, #e0e1e9);border:0.0625rem solid var(--modus-chip-outline-hover-border-color, #90939f);color:var(--modus-chip-outline-hover-color, #585c65)}.modus-chip:hover.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-hover-color, #585c65) !important}.modus-chip:hover.style-outline .icon-remove,.modus-chip:hover.style-outline .icon-remove path{fill:var(--modus-chip-outline-hover-color, #585c65) !important}.modus-chip.active{background-color:var(--modus-chip-active-bg, rgba(33, 124, 187, 0.3019607843));border:0.0625rem solid var(--modus-chip-active-bg, rgba(33, 124, 187, 0.3019607843));color:var(--modus-chip-active-color, #252a2e)}.modus-chip.active svg:not(.icon-remove) path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip.active .icon-remove,.modus-chip.active .icon-remove path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip.active.style-outline{background-color:var(--modus-chip-outline-active-bg, #dcedf9);border:0.0625rem solid var(--modus-chip-outline-active-border-color, #217cbb);color:var(--modus-chip-outline-active-color, #252a2e)}.modus-chip.active.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-active-color, #252a2e) !important}.modus-chip.active.style-outline .icon-remove,.modus-chip.active.style-outline .icon-remove path{fill:var(--modus-chip-outline-active-border-color, #217cbb) !important}.modus-chip:active{background-color:var(--modus-chip-active-bg, rgba(33, 124, 187, 0.3019607843));border:0.0625rem solid var(--modus-chip-active-bg, rgba(33, 124, 187, 0.3019607843));color:var(--modus-chip-active-color, #252a2e)}.modus-chip:active svg:not(.icon-remove) path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip:active .icon-remove,.modus-chip:active .icon-remove path{fill:var(--modus-chip-active-color, #252a2e) !important}.modus-chip:active.style-outline{background-color:var(--modus-chip-outline-active-bg, #dcedf9);border:0.0625rem solid var(--modus-chip-outline-active-border-color, #217cbb);color:var(--modus-chip-outline-active-color, #252a2e)}.modus-chip:active.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-active-color, #252a2e) !important}.modus-chip:active.style-outline .icon-remove,.modus-chip:active.style-outline .icon-remove path{fill:var(--modus-chip-outline-active-border-color, #217cbb) !important}.modus-chip.has-error{background-color:var(--modus-chip-error-bg, #fbd4d7);border:0.0625rem solid var(--modus-chip-error-bg, #fbd4d7);color:var(--modus-chip-error-color, #ab1f26)}.modus-chip.has-error svg:not(.icon-remove) path{fill:var(--modus-chip-error-color, #ab1f26) !important}.modus-chip.has-error .icon-remove,.modus-chip.has-error .icon-remove path{fill:var(--modus-chip-error-color, #ab1f26) !important}.modus-chip.has-error.active{background-color:var(--modus-chip-error-active-bg, #adaeb6);border:0.0625rem solid var(--modus-chip-error-active-border-color, #adaeb6);color:var(--modus-chip-error-active-color, #000)}.modus-chip.has-error.active svg:not(.icon-remove) path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error.active .icon-remove,.modus-chip.has-error.active .icon-remove path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error:active{background-color:var(--modus-chip-error-active-bg, #adaeb6);border:0.0625rem solid var(--modus-chip-error-active-border-color, #adaeb6);color:var(--modus-chip-error-active-color, #000)}.modus-chip.has-error:active svg:not(.icon-remove) path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error:active .icon-remove,.modus-chip.has-error:active .icon-remove path{fill:var(--modus-chip-error-active-color, #000) !important}.modus-chip.has-error.style-outline{background-color:var(--modus-chip-outline-error-bg, #fbd4d7);border:0.0625rem solid var(--modus-chip-outline-error-border-color, #ab1f26);color:var(--modus-chip-outline-error-color, #ab1f26)}.modus-chip.has-error.style-outline svg:not(.icon-remove) path{fill:var(--modus-chip-outline-error-color, #ab1f26) !important}.modus-chip.has-error.style-outline .icon-remove,.modus-chip.has-error.style-outline .icon-remove path{fill:var(--modus-chip-outline-error-color, #ab1f26) !important}.modus-chip.has-error.style-outline:active{background-color:var(--modus-chip-outline-error-active-bg, #d3d5dc);border:0.0625rem solid var(--modus-chip-outline-error-active-border-color, #7a7b80);color:var(--modus-chip-outline-error-active-color, #252a2e)}.modus-chip.has-error.style-outline:active svg:not(.icon-remove) path{fill:var(--modus-chip-outline-error-active-color, #252a2e) !important}.modus-chip.has-error.style-outline:active .icon-remove,.modus-chip.has-error.style-outline:active .icon-remove path{fill:var(--modus-chip-outline-error-active-color, #252a2e) !important}.modus-chip.disabled{opacity:var(--modus-chip-disabled-opacity, 0.3);pointer-events:none}";
const ModusChipStyle0 = modusChipCss;

const ModusChip = /*@__PURE__*/ proxyCustomElement(class ModusChip extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.chipClick = createEvent(this, "chipClick", 7);
        this.closeClick = createEvent(this, "closeClick", 7);
        this.classByChipStyle = new Map([
            ['outline', 'style-outline'],
            ['solid', 'style-solid'],
        ]);
        this.classBySize = new Map([
            ['medium', 'medium'],
            ['small', 'small'],
        ]);
        this.ariaLabel = undefined;
        this.chipStyle = 'solid';
        this.disabled = false;
        this.hasError = false;
        this.imageUrl = undefined;
        this.advancedChip = undefined;
        this.showCheckmark = false;
        this.showClose = false;
        this.size = 'medium';
        this.value = undefined;
        this.chipId = undefined;
        this.maxWidth = undefined;
        this.active = false;
    }
    elementKeyupHandler(event) {
        switch (event.code) {
            case 'Escape':
                if (!this.showClose) {
                    return;
                }
                this.closeClick.emit(event);
                break;
        }
    }
    elementKeydownHandler(event) {
        if (event.code === 'Enter' || event.code === 'Space') {
            event.preventDefault();
            this.chipClick.emit(event);
        }
    }
    onChipClick(event) {
        if (event.defaultPrevented) {
            return;
        } // Don't emit chipClick if closeClick has emitted.
        this.chipClick.emit(event);
    }
    onCloseClick(event) {
        this.closeClick.emit(event);
        event.preventDefault();
    }
    render() {
        var _a;
        const chipClass = `
      modus-chip ${this.disabled ? 'disabled' : ''}
      ${this.hasError ? 'has-error' : ''}
      ${this.classByChipStyle.get(this.chipStyle)}
      ${this.classBySize.get(this.size)}
      ${!this.showCheckmark && !this.imageUrl ? 'no-left-icon' : null}
      ${!this.showClose ? 'no-right-icon' : null}
      ${this.active ? 'active' : ''}
    `;
        const style = {
            style: {
                'max-width': (_a = this.maxWidth) !== null && _a !== void 0 ? _a : undefined,
            },
        };
        return (h$1("button", { key: '6cbd7f607b28fc33022c14e40f6b8a3683660e6b', "aria-disabled": this.disabled ? 'true' : undefined, "aria-label": this.ariaLabel || undefined, id: this.chipId || undefined, class: chipClass, part: "chipButton", onClick: this.disabled ? null : (event) => this.onChipClick(event), tabIndex: 0, style: this.advancedChip ? { 'border-radius': '8px' } : {}, type: "button" }, this.imageUrl ? (h$1("img", { src: this.imageUrl, alt: "" })) : this.showCheckmark ? (h$1(IconCheck, { size: '16' })) : null, h$1("span", Object.assign({ key: '262d81e42652bec6f273f37f8c238804171b727c' }, style), this.value), this.advancedChip && h$1(ModusIconMap, { icon: "caret_down", size: '16' }), this.showClose ? (this.advancedChip ? (h$1(IconClose, { onClick: this.disabled ? null : (event) => this.onCloseClick(event), size: '16' })) : (h$1(IconRemove, { onClick: this.disabled ? null : (event) => this.onCloseClick(event), size: '16' }))) : null));
    }
    static get style() { return ModusChipStyle0; }
}, [1, "modus-chip", {
        "ariaLabel": [1, "aria-label"],
        "chipStyle": [1, "chip-style"],
        "disabled": [4],
        "hasError": [4, "has-error"],
        "imageUrl": [1, "image-url"],
        "advancedChip": [4, "advanced-chip"],
        "showCheckmark": [4, "show-checkmark"],
        "showClose": [4, "show-close"],
        "size": [1],
        "value": [1],
        "chipId": [1, "chip-id"],
        "maxWidth": [1, "max-width"],
        "active": [4]
    }, [[0, "keyup", "elementKeyupHandler"], [0, "keydown", "elementKeydownHandler"]]]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-chip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-chip":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusChip);
            }
            break;
    } });
}

export { ModusChip as M, defineCustomElement as d };
