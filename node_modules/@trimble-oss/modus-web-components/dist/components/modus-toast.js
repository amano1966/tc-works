import { p as proxyCustomElement, H, d as createEvent, h } from './p-85681586.js';
import { I as IconError } from './p-d884174d.js';
import { b as IconWarning, I as IconInfo, a as IconCheckCircle } from './p-fa99fbbc.js';
import { I as IconHelp } from './p-3266dd9d.js';
import { I as IconClose } from './p-89c176f3.js';

const modusToastCss = ".modus-toast{align-items:center;background-color:var(--modus-toast-bg, #fff);border:0.0625rem solid transparent;border-radius:0.25rem;box-shadow:0 0 8px rgba(36, 35, 45, 0.3);color:var(--modus-toast-color, #252a2e);display:flex;flex-direction:row;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";font-size:0.875rem;min-height:2.6875rem;padding:0 1rem;width:370px}.modus-toast .icon{align-items:center;display:flex;justify-content:center;min-width:1.125rem}.modus-toast .text{margin:0 0.5rem}.modus-toast .close{background-color:transparent;border:0;margin-left:auto;margin-top:2px}.modus-toast .close .icon-close{height:18px;width:18px}.modus-toast .close:hover svg{cursor:pointer}.modus-toast .close:hover svg path{opacity:0.5}.modus-toast.primary{background-color:var(--modus-toast-primary-bg, #0063a3);border-color:var(--modus-toast-primary-bg, );color:var(--modus-toast-primary-color, #fff)}.modus-toast.primary .close svg path{fill:var(--modus-toast-primary-color, var(--modus-toast-color, #252a2e))}.modus-toast.primary svg:not(.icon-close) path{fill:var(--modus-toast-primary-color, )}.modus-toast.secondary{background-color:var(--modus-toast-secondary-bg, #252a2e);border-color:var(--modus-toast-secondary-bg, );color:var(--modus-toast-secondary-color, #fff)}.modus-toast.secondary .close svg path{fill:var(--modus-toast-secondary-color, var(--modus-toast-color, #252a2e))}.modus-toast.secondary svg:not(.icon-close) path{fill:var(--modus-toast-secondary-color, )}.modus-toast.success{background-color:var(--modus-toast-success-bg, #006638);border-color:var(--modus-toast-success-bg, );color:var(--modus-toast-success-color, #fff)}.modus-toast.success .close svg path{fill:var(--modus-toast-success-color, var(--modus-toast-color, #252a2e))}.modus-toast.success svg:not(.icon-close) path{fill:var(--modus-toast-success-color, )}.modus-toast.danger{background-color:var(--modus-toast-danger-bg, #ab1f26);border-color:var(--modus-toast-danger-bg, );color:var(--modus-toast-danger-color, #fff)}.modus-toast.danger .close svg path{fill:var(--modus-toast-danger-color, var(--modus-toast-color, #252a2e))}.modus-toast.danger svg:not(.icon-close) path{fill:var(--modus-toast-danger-color, )}";
const ModusToastStyle0 = modusToastCss;

const ModusToast$1 = /*@__PURE__*/ proxyCustomElement(class ModusToast extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.dismissClick = createEvent(this, "dismissClick", 7);
        this.iconByType = new Map([
            ['danger', h(IconWarning, { size: '18' })],
            ['dark', h(IconInfo, { size: '18' })],
            ['default', h(IconInfo, { size: '18' })],
            ['primary', h(IconInfo, { size: '18' })],
            ['secondary', h(IconHelp, { size: '18' })],
            ['success', h(IconCheckCircle, { size: '18' })],
            ['tertiary', h(IconInfo, { size: '18' })],
            ['warning', h(IconError, { size: '18' })],
        ]);
        this.classByType = new Map([
            ['danger', 'danger'],
            ['dark', 'dark'],
            ['default', 'default'],
            ['primary', 'primary'],
            ['secondary', 'secondary'],
            ['success', 'success'],
            ['tertiary', 'tertiary'],
            ['warning', 'warning'],
        ]);
        this.ariaLabel = undefined;
        this.dismissible = undefined;
        this.delay = 15000;
        this.retainElement = false;
        this.role = 'status';
        this.showIcon = true;
        this.type = 'default';
    }
    delayChanged(newDelay) {
        clearTimeout(this.timerId);
        this.timerId = setTimeout(() => {
            this.dismissElement();
        }, newDelay);
    }
    dismissElement() {
        this.dismissClick.emit();
        if (!this.retainElement) {
            this.el.remove();
        }
    }
    componentDidLoad() {
        if (this.delay > 0) {
            this.timerId = setTimeout(() => {
                this.dismissElement();
            }, this.delay);
        }
    }
    disconnectedCallback() {
        clearTimeout(this.timerId);
    }
    render() {
        const icon = this.iconByType.get(this.type);
        const className = `modus-toast ${this.classByType.get(this.type)}`;
        return (h("div", { key: '8658f1fee085330df445f03ac14d44573ce4de6c', "aria-label": this.ariaLabel || undefined, class: className, role: this.role }, this.showIcon && h("div", { class: "icon" }, icon), h("span", { key: 'e4751abc2649fd769044abf05cee339da6eba12b', class: 'text' }, h("slot", { key: '234833e6f3412f94e1c1b7ea2a5d3e5c1346cc2b' })), this.dismissible && (h("button", { type: "button", class: 'close', onClick: () => this.dismissElement(), "aria-label": "Dismiss" }, h(IconClose, { size: '18' })))));
    }
    get el() { return this; }
    static get watchers() { return {
        "delay": ["delayChanged"]
    }; }
    static get style() { return ModusToastStyle0; }
}, [1, "modus-toast", {
        "ariaLabel": [1, "aria-label"],
        "dismissible": [4],
        "delay": [2],
        "retainElement": [4, "retain-element"],
        "role": [1],
        "showIcon": [4, "show-icon"],
        "type": [1]
    }, undefined, {
        "delay": ["delayChanged"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-toast"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-toast":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusToast$1);
            }
            break;
    } });
}

const ModusToast = ModusToast$1;
const defineCustomElement = defineCustomElement$1;

export { ModusToast, defineCustomElement };
