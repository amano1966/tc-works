import { p as proxyCustomElement, H, h, c as Host } from './p-85681586.js';

const modusProgressBarCss = ".modus-progress-bar{display:flex;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";height:1rem;outline:0.0625rem solid var(--modus-progress-border-color, #6a6e79);overflow:hidden;position:relative;width:100%}.modus-progress-bar.default-background-color{background-color:var(--modus-progress-bg, #fff)}.modus-progress-bar .progress{display:flex;font-size:0.75rem;forced-color-adjust:none;justify-content:center;overflow:hidden;transition:width 0.6s ease}.modus-progress-bar .progress.default-color{background-color:var(--modus-progress-bar-bg, #0063a3)}.modus-progress-bar .progress.default-text-color{color:#fff}.modus-progress-bar .progress.indeterminate{animation:indeterminate-animation 1.5s infinite linear;background-color:var(--modus-progress-bar-bg, #0063a3);height:100%;overflow:hidden;position:relative;width:100%}.modus-progress-bar.small{height:0.5rem}.modus-progress-bar.compact{height:0.25rem}@keyframes indeterminate-animation{0%{left:-50%;width:50%}50%{left:25%;width:50%}100%{left:100%;width:50%}}";
const ModusProgressBarStyle0 = modusProgressBarCss;

const ModusProgressBar$1 = /*@__PURE__*/ proxyCustomElement(class ModusProgressBar extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.classBySize = new Map([
            ['default', 'default'],
            ['small', 'small'],
            ['compact', 'compact'],
        ]);
        this.ariaLabel = undefined;
        this.backgroundColor = undefined;
        this.color = undefined;
        this.maxValue = 100;
        this.minValue = 0;
        this.mode = 'determinate';
        this.size = 'default';
        this.text = undefined;
        this.textColor = undefined;
        this.value = 0;
    }
    getProgressStyle(percentage) {
        const progressStyle = {
            backgroundColor: this.color,
            color: this.textColor,
            width: this.mode === 'determinate' ? `${percentage}%` : '100%',
        };
        return progressStyle;
    }
    getProgressBarStyle() {
        const progressBarStyle = {
            backgroundColor: this.backgroundColor,
        };
        return progressBarStyle;
    }
    render() {
        const percentage = ((this.value - this.minValue) / (this.maxValue - this.minValue)) * 100;
        const progressBarBackgroundColorClass = this.backgroundColor ? '' : 'default-background-color';
        const progressColorClass = this.color ? '' : 'default-color';
        const progressTextColor = this.textColor ? '' : 'default-text-color';
        const progressBarClass = `
      modus-progress-bar
      ${progressBarBackgroundColorClass}
      ${this.classBySize.get(this.size)}
     `;
        const progressClass = `progress ${progressColorClass} ${progressTextColor} ${this.mode === 'indeterminate' ? 'indeterminate' : 'determinate'}`;
        return (h(Host, { key: '598b24ac61bf998feea59b9188bd4ea9c2fb9b29', "aria-label": this.ariaLabel, "aria-valuemax": this.mode === 'determinate' ? this.maxValue : null, "aria-valuemin": this.mode === 'determinate' ? this.minValue : null, "aria-valuenow": this.mode === 'determinate' ? this.value : null, role: "progressbar" }, h("div", { key: '0c881a3a711ee478d624c11834c858aeef646348', class: progressBarClass, style: this.getProgressBarStyle() }, h("div", { key: 'd6f1f979aa8bdb2ddb63188b1052655e7392c072', class: progressClass, style: this.getProgressStyle(percentage) }, this.size === 'default' && this.mode === 'determinate' && this.text))));
    }
    static get style() { return ModusProgressBarStyle0; }
}, [1, "modus-progress-bar", {
        "ariaLabel": [1, "aria-label"],
        "backgroundColor": [1, "background-color"],
        "color": [1],
        "maxValue": [2, "max-value"],
        "minValue": [2, "min-value"],
        "mode": [1],
        "size": [1],
        "text": [1],
        "textColor": [1, "text-color"],
        "value": [2]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-progress-bar"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-progress-bar":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusProgressBar$1);
            }
            break;
    } });
}

const ModusProgressBar = ModusProgressBar$1;
const defineCustomElement = defineCustomElement$1;

export { ModusProgressBar, defineCustomElement };
