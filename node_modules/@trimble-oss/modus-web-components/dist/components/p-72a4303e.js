import { p as proxyCustomElement, H, h } from './p-85681586.js';

const modusTableFillerColumnCss = "modus-table-filler-column{z-index:0}modus-table-filler-column .d-none{display:none}modus-table-filler-column table thead tr,modus-table-filler-column table tfoot tr{height:inherit}modus-table-filler-column table:not(.cell-borderless) td:last-child,modus-table-filler-column table:not(.cell-borderless) th:last-child{border-right:none}modus-table-filler-column table:not(.cell-borderless) tbody td:first-child,modus-table-filler-column table:not(.cell-borderless) thead th:first-child{border-left:0.0625rem var(--modus-table-border-color, #b7b9c3) solid !important}";
const ModusTableFillerColumnStyle0 = modusTableFillerColumnCss;

const ModusTableFillerColumn = /*@__PURE__*/ proxyCustomElement(class ModusTableFillerColumn extends H {
    constructor() {
        super();
        this.__registerHost();
        this.observer = null;
        this.updateContainerLayout = () => {
            var _a, _b, _c, _d, _e, _f;
            const tableWidth = (_a = this.targetTable.getBoundingClientRect()) === null || _a === void 0 ? void 0 : _a.width;
            const parentWidth = (_c = (_b = this.targetTable.parentElement) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect()) === null || _c === void 0 ? void 0 : _c.width;
            this.showFillerTable = tableWidth < parentWidth;
            if (!this.showFillerTable)
                return;
            if (this.fillerTableRef) {
                this.fillerTableRef.querySelector('thead').style.height = `${(_d = this.targetTable.querySelector('thead')) === null || _d === void 0 ? void 0 : _d.getBoundingClientRect().height}px`;
                if (this.summaryRow) {
                    this.fillerTableRef.querySelector('tfoot').style.height = `${(_e = this.targetTable.querySelector('tfoot')) === null || _e === void 0 ? void 0 : _e.getBoundingClientRect().height}px`;
                }
                this.fillerTableRef.querySelector('tbody').style.height = `${(_f = this.targetTable.querySelector('tbody')) === null || _f === void 0 ? void 0 : _f.getBoundingClientRect().height}px`;
            }
        };
        this.cellBorderless = undefined;
        this.summaryRow = undefined;
        this.container = undefined;
        this.showFillerTable = false;
    }
    componentDidLoad() {
        this.targetTable = this.container.shadowRoot.querySelector('table');
        if (this.targetTable) {
            this.updateContainerLayout();
            this.connectDOMObserver();
        }
    }
    disconnectedCallback() {
        this.disconnectDOMObserver();
    }
    connectDOMObserver() {
        this.observer = new ResizeObserver(this.updateContainerLayout);
        this.observer.observe(this.targetTable);
    }
    disconnectDOMObserver() {
        if (this.observer) {
            this.observer.disconnect();
        }
    }
    render() {
        return (h("table", { key: '8c5d31136767a6da879b04edca26d4da23e667a5', id: "table-filler-column", class: { 'cell-borderless': this.cellBorderless, 'd-none': !this.showFillerTable }, ref: (el) => (this.fillerTableRef = el) }, h("thead", { key: '458db94209103de571922b9b0bb05146c8033f45' }, h("tr", { key: '560d80b509a9bc83f851e972d7d77f68bebfa085' }, h("th", { key: '760ed56de2d8d909e5e2e17b25b56148a85537ae' }))), h("tbody", { key: 'fc01fb5caf8078b4989268ddb2b56a27820e3d06' }, h("tr", { key: '1dda921e8ce27b3538ef858829c5215329319122' }, h("td", { key: '2b9208f58aa2f45dac97186d33433ce4e450382e' }))), this.summaryRow && (h("tfoot", null, h("tr", { class: "summary-row" }, h("td", null))))));
    }
    static get style() { return ModusTableFillerColumnStyle0; }
}, [0, "modus-table-filler-column", {
        "cellBorderless": [4, "cell-borderless"],
        "summaryRow": [4, "summary-row"],
        "container": [16],
        "showFillerTable": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-table-filler-column"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-table-filler-column":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusTableFillerColumn);
            }
            break;
    } });
}

export { ModusTableFillerColumn as M, defineCustomElement as d };
