import { p as proxyCustomElement, H, h, c as Host } from './p-85681586.js';
import { N as NavigateTableCells } from './p-3af926db.js';
import { f as KEYBOARD_ENTER } from './p-5d1d55be.js';
import { d as defineCustomElement$3 } from './p-56367692.js';
import { d as defineCustomElement$2 } from './p-6905d804.js';
import { d as defineCustomElement$1 } from './p-03a9687b.js';

const ModusTableRowActionsCell = /*@__PURE__*/ proxyCustomElement(class ModusTableRowActionsCell extends H {
    constructor() {
        super();
        this.__registerHost();
        this.onCellKeyDown = (e) => this.handleCellKeydown(e);
        this.handleCellKeydown = (event) => {
            var _a, _b, _c;
            if (event.defaultPrevented)
                return;
            const key = (_a = event.key) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (key === KEYBOARD_ENTER) {
                (_c = (_b = this.el.firstChild) === null || _b === void 0 ? void 0 : _b.firstChild) === null || _c === void 0 ? void 0 : _c.focusButton();
                event.stopPropagation();
            }
            else {
                NavigateTableCells({
                    eventKey: event.key,
                    cellElement: this.cellEl,
                });
            }
        };
        this.row = undefined;
        this.context = undefined;
    }
    connectedCallback() {
        this.cellEl = this.el.parentElement;
        this.cellEl.addEventListener('keydown', this.onCellKeyDown);
    }
    disconnectedCallback() {
        if (this.cellEl) {
            this.cellEl.removeEventListener('keydown', this.onCellKeyDown);
        }
    }
    render() {
        return (h(Host, { key: '99e83886c3f3c7adb4558b0ca6b4f67ad5b66763' }, h("modus-table-row-actions", { key: 'a40fb8324cd122292b9806cd66e28ff747c17b24', row: this.row, context: this.context })));
    }
    get el() { return this; }
}, [0, "modus-table-row-actions-cell", {
        "row": [16],
        "context": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-table-row-actions-cell", "modus-button", "modus-table-row-actions", "modus-tooltip"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-table-row-actions-cell":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusTableRowActionsCell);
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-table-row-actions":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "modus-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { ModusTableRowActionsCell as M, defineCustomElement as d };
