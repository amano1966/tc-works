import { p as proxyCustomElement, H, h, c as Host } from './p-85681586.js';

const FlexRenderer = /*@__PURE__*/ proxyCustomElement(class FlexRenderer extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.content = '';
    }
    componentDidLoad() {
        this.renderHTMLContent();
    }
    renderHTMLContent() {
        const htmlString = this.content.trim();
        const parsedElements = this.parseHTMLString(htmlString);
        const shadowRoot = this.el.shadowRoot;
        if (shadowRoot) {
            parsedElements.forEach((element) => {
                shadowRoot.appendChild(element);
            });
        }
    }
    parseHTMLString(html) {
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const elements = Array.from(doc.body.childNodes);
        return elements.map((element) => this.createElementFromNode(element));
    }
    createElementFromNode(node) {
        const element = document.createElement(node.tagName.toLowerCase());
        Array.from(node.attributes).forEach((attr) => {
            element.setAttribute(attr.name, attr.value);
        });
        if (node.childNodes.length > 0) {
            node.childNodes.forEach((child) => {
                if (child.nodeType === Node.TEXT_NODE) {
                    element.appendChild(document.createTextNode(child.textContent));
                }
                else if (child.nodeType === Node.ELEMENT_NODE) {
                    element.appendChild(this.createElementFromNode(child));
                }
            });
        }
        return element;
    }
    render() {
        return h(Host, { key: 'f1d1844c4dc3c40709804bd3c061ad15aec2e0da' });
    }
    get el() { return this; }
}, [1, "flex-renderer", {
        "content": [1]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["flex-renderer"];
    components.forEach(tagName => { switch (tagName) {
        case "flex-renderer":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, FlexRenderer);
            }
            break;
    } });
}

export { FlexRenderer as F, defineCustomElement as d };
