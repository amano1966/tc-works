import { p as proxyCustomElement, H, h as h$1 } from './p-85681586.js';
import { h } from './p-5f965237.js';
import { f as KEYBOARD_ENTER, j as KEYBOARD_SPACE, g as KEYBOARD_ESCAPE } from './p-5d1d55be.js';
import { d as defineCustomElement$3 } from './p-56367692.js';
import { d as defineCustomElement$2 } from './p-a67f7d10.js';
import { d as defineCustomElement$1 } from './p-97d71c36.js';

// eslint-disable-next-line
const IconHorizontalEllipsis = (props) => {
    var _a, _b, _c;
    return (h("svg", { class: `icon-horizontal-ellipsis ${props.pressed ? 'pressed' : ''}`, fill: (_a = props.color) !== null && _a !== void 0 ? _a : 'currentColor', height: (_b = props.size) !== null && _b !== void 0 ? _b : 16, onClick: props.onClick ? () => props.onClick() : null, viewBox: "0 0 24 24", width: (_c = props.size) !== null && _c !== void 0 ? _c : 16 },
        h("path", { d: "M10.59 10.59c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm7 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Zm-14 0c-.78.78-.78 2.05 0 2.83s2.05.78 2.83 0 .78-2.05 0-2.83-2.05-.78-2.83 0Z" })));
};

const modusTableDropdownMenuCss = ".dropdown-menu-container{display:inline-block;padding-left:12px;position:relative}.dropdown-menu-container .dropdown-menu-icon{border-radius:3px;cursor:pointer;display:flex;padding:4px}.dropdown-menu-container .dropdown-menu-icon svg{fill:var(--modus-icon-colour, #252a2e)}.dropdown-menu-container .dropdown-menu-icon:hover{background:var(--modus-group-item-hover-bg, #e0e1e9)}.dropdown-menu-container .dropdown-menu{background-color:var(--modus-group-item-bg, #fff);border:1px solid var(--modus-group-item-border-color, #e0e1e9);box-shadow:0 0 4px var(--modus-card-shadow-color, rgba(54, 53, 69, 0.3019607843));display:none;font-family:\"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";position:absolute;right:0;top:28px;width:240px;z-index:99}.dropdown-menu-container .dropdown-menu.visible{display:block}";
const ModusTableDropdownMenuStyle0 = modusTableDropdownMenuCss;

const ModusTableDropdownMenu = /*@__PURE__*/ proxyCustomElement(class ModusTableDropdownMenu extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.context = undefined;
        this.show = false;
    }
    handleClickOutside(event) {
        // Closing the dropdown when click outside
        const withinBoundaries = event.composedPath();
        if (!withinBoundaries.find((item) => item['className'] === 'dropdown-menu-container')) {
            this.show = false;
        }
    }
    handleIconKeyDown(event) {
        const eventKey = event.key.toLowerCase();
        if (eventKey === KEYBOARD_ENTER || eventKey === KEYBOARD_SPACE) {
            this.show = true;
            event.preventDefault();
        }
        else if (eventKey === KEYBOARD_ESCAPE) {
            this.show = false;
            event.preventDefault();
        }
    }
    handleDropdownKeyDown(event) {
        if (event.key.toLowerCase() === KEYBOARD_ESCAPE) {
            this.show = false;
            this.menuIconContainerRef.focus();
            event.preventDefault();
        }
    }
    render() {
        const { tableInstance: { getAllLeafColumns }, toolbarOptions: options, maxHeight, } = this.context;
        return (h$1("div", { key: 'e028260e39853e6d9bb12954c06d0ca36b858fbe', class: "dropdown-menu-container" }, h$1("div", { key: 'f4ca8b772cd9207c5e4349e9b90a6ca270f685bf', tabIndex: 0, class: "dropdown-menu-icon", onClick: () => (this.show = !this.show), onKeyDown: (event) => this.handleIconKeyDown(event), ref: (el) => (this.menuIconContainerRef = el) }, h$1(IconHorizontalEllipsis, { key: 'ee5496caaa3a62710c2f4ce76a0006017c36d136', size: "20" })), (options === null || options === void 0 ? void 0 : options.columnsVisibility) && (h$1("div", { onKeyDown: (event) => this.handleDropdownKeyDown(event), class: `dropdown-menu ${this.show ? 'visible' : ''}` }, h$1("modus-table-columns-visibility", { getAllLeafColumns: getAllLeafColumns, columnsVisibility: options === null || options === void 0 ? void 0 : options.columnsVisibility, showDropdown: this.show, menuIconContainerRef: this.menuIconContainerRef, toggleDropdown: (show) => (this.show = show), maxHeight: maxHeight })))));
    }
    static get style() { return ModusTableDropdownMenuStyle0; }
}, [1, "modus-table-dropdown-menu", {
        "context": [16],
        "show": [32]
    }, [[4, "click", "handleClickOutside"]]]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["modus-table-dropdown-menu", "modus-button", "modus-checkbox", "modus-table-columns-visibility"];
    components.forEach(tagName => { switch (tagName) {
        case "modus-table-dropdown-menu":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ModusTableDropdownMenu);
            }
            break;
        case "modus-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "modus-checkbox":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "modus-table-columns-visibility":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { ModusTableDropdownMenu as M, defineCustomElement as d };
